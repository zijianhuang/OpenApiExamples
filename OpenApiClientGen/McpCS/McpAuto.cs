//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace APS.Mcp.Proxy
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Net.Http;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	[System.Runtime.Serialization.DataContract(Namespace="http://mcp.medilink/03/2020")]
	public class BBSReportRequestType
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="payeeProvider")]
		public ProviderType PayeeProvider { get; set; }
		
		/// <summary>
		/// Max length: 6
		/// Min length: 6
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="claimId")]
		[System.ComponentModel.DataAnnotations.StringLength(6, MinimumLength=6)]
		public string ClaimId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lodgementDate")]
		public System.DateOnly? LodgementDate { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://mcp.medilink/03/2020")]
	public class ProviderType
	{
		
		/// <summary>
		/// Required
		/// Max length: 8
		/// Min length: 8
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="providerNumber")]
		[System.ComponentModel.DataAnnotations.StringLength(8, MinimumLength=8)]
		public string ProviderNumber { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://mcp.medilink/03/2020")]
	public class BBSPaymentReportResponseType
	{
		
		[System.Runtime.Serialization.DataMember(Name="paymentRun")]
		public PaymentRunType PaymentRun { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="paymentInfo")]
		public PaymentType PaymentInfo { get; set; }
		
		/// <summary>
		/// Minimum items: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="claimSummary")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public ClaimSummaryType[] ClaimSummary { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="status")]
		public string Status { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://mcp.medilink/03/2020")]
	public class PaymentRunType
	{
		
		[System.Runtime.Serialization.DataMember(Name="payerName")]
		public string PayerName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="runDate")]
		public System.DateOnly? RunDate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="runNumber")]
		public string RunNumber { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://mcp.medilink/03/2020")]
	public class PaymentType
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="accountInfo")]
		public BankAccountType AccountInfo { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="depositAmount")]
		public string DepositAmount { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="paymentReference")]
		public string PaymentReference { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://mcp.medilink/03/2020")]
	public class BankAccountType
	{
		
		/// <summary>
		/// Max length: 30
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="accountName")]
		[System.ComponentModel.DataAnnotations.StringLength(30, MinimumLength=1)]
		public string AccountName { get; set; }
		
		/// <summary>
		/// Max length: 9
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="accountNumber")]
		[System.ComponentModel.DataAnnotations.StringLength(9, MinimumLength=1)]
		public string AccountNumber { get; set; }
		
		/// <summary>
		/// Max length: 6
		/// Min length: 6
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bsbCode")]
		[System.ComponentModel.DataAnnotations.StringLength(6, MinimumLength=6)]
		public string BsbCode { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://mcp.medilink/03/2020")]
	public class ClaimSummaryType
	{
		
		[System.Runtime.Serialization.DataMember(Name="accountReferenceId")]
		public string AccountReferenceId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="benefit")]
		public string Benefit { get; set; }
		
		/// <summary>
		/// Max length: 9
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="chargeAmount")]
		[System.ComponentModel.DataAnnotations.StringLength(9, MinimumLength=1)]
		public string ChargeAmount { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="claimChannelCode")]
		public string ClaimChannelCode { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="claimId")]
		public string ClaimId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lodgementDate")]
		public System.DateOnly? LodgementDate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transactionId")]
		public string TransactionId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://mcp.medilink/03/2020")]
	public class ServiceMessagesType
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="highestSeverity")]
		public ServiceMessagesTypeHighestSeverity HighestSeverity { get; set; }
		
		/// <summary>
		/// Required
		/// Minimum items: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="serviceMessage")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public ServiceMessageType[] ServiceMessage { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://mcp.medilink/03/2020")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	public enum ServiceMessagesTypeHighestSeverity
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Fatal")]
		Fatal = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Error")]
		Error = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Warning")]
		Warning = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Informational")]
		Informational = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://mcp.medilink/03/2020")]
	public class ServiceMessageType
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="code")]
		public string Code { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="severity")]
		public ServiceMessagesTypeHighestSeverity Severity { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="reason")]
		public string Reason { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://mcp.medilink/03/2020")]
	public class BBSProcessingReportResponseType
	{
		
		[System.Runtime.Serialization.DataMember(Name="claimAssessment")]
		public ClaimAssessmentType ClaimAssessment { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="status")]
		public string Status { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://mcp.medilink/03/2020")]
	public class ClaimAssessmentType
	{
		
		/// <summary>
		/// Minimum items: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="medicalEvent")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public MedicalEventResponseType[] MedicalEvent { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="serviceProvider")]
		public ProviderType ServiceProvider { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="benefitPaid")]
		public string BenefitPaid { get; set; }
		
		/// <summary>
		/// Max length: 9
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="chargeAmount")]
		[System.ComponentModel.DataAnnotations.StringLength(9, MinimumLength=1)]
		public string ChargeAmount { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="claimId")]
		public string ClaimId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://mcp.medilink/03/2020")]
	public class MedicalEventResponseType
	{
		
		[System.Runtime.Serialization.DataMember(Name="patient")]
		public MembershipStatusType Patient { get; set; }
		
		/// <summary>
		/// Minimum items: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="service")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public ServiceResponseType[] Service { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="eventDate")]
		public System.DateOnly? EventDate { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://mcp.medilink/03/2020")]
	public class MembershipStatusType
	{
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public StatusType Status { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="currentMembership")]
		public MembershipType CurrentMembership { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="currentMember")]
		public IdentityType CurrentMember { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="processDate")]
		public System.DateOnly? ProcessDate { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://mcp.medilink/03/2020")]
	public class StatusType
	{
		
		[System.Runtime.Serialization.DataMember(Name="code")]
		public System.Int32? Code { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="text")]
		public string Text { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://mcp.medilink/03/2020")]
	public class MembershipType
	{
		
		/// <summary>
		/// Max length: 10
		/// Min length: 10
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="memberNumber")]
		[System.ComponentModel.DataAnnotations.StringLength(10, MinimumLength=10)]
		public string MemberNumber { get; set; }
		
		/// <summary>
		/// Max length: 1
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="memberRefNumber")]
		[System.ComponentModel.DataAnnotations.StringLength(1, MinimumLength=1)]
		public string MemberRefNumber { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://mcp.medilink/03/2020")]
	public class IdentityType
	{
		
		[System.Runtime.Serialization.DataMember(Name="dateOfBirth")]
		public System.DateOnly? DateOfBirth { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="familyName")]
		public string FamilyName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="givenName")]
		public string GivenName { get; set; }
		
		/// <summary>
		/// Max length: 1
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="secondInitial")]
		[System.ComponentModel.DataAnnotations.StringLength(1, MinimumLength=1)]
		public string SecondInitial { get; set; }
		
		/// <summary>
		/// Max length: 1
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sex")]
		[System.ComponentModel.DataAnnotations.StringLength(1, MinimumLength=1)]
		public string Sex { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://mcp.medilink/03/2020")]
	public class ServiceResponseType
	{
		
		[System.Runtime.Serialization.DataMember(Name="error")]
		public StatusType Error { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="assessmentCode")]
		public string AssessmentCode { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="benefitPaid")]
		public string BenefitPaid { get; set; }
		
		/// <summary>
		/// Max length: 9
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="chargeAmount")]
		[System.ComponentModel.DataAnnotations.StringLength(9, MinimumLength=1)]
		public string ChargeAmount { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="itemNumber")]
		public string ItemNumber { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="numberOfPatientsSeen")]
		public string NumberOfPatientsSeen { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://mcp.medilink/03/2020")]
	public class BulkBillStoreForwardRequestType
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="claim")]
		public BulkBillClaimStoreForwardClaimType Claim { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://mcp.medilink/03/2020")]
	public class BulkBillClaimStoreForwardClaimType
	{
		
		/// <summary>
		/// Max length: 8
		/// Min length: 8
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="facilityId")]
		[System.ComponentModel.DataAnnotations.StringLength(8, MinimumLength=8)]
		public string FacilityId { get; set; }
		
		/// <summary>
		/// Max length: 1
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hospitalInd")]
		[System.ComponentModel.DataAnnotations.StringLength(1, MinimumLength=1)]
		public string HospitalInd { get; set; }
		
		/// <summary>
		/// Required
		/// Minimum items: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="medicalEvent")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public BBSMedicalEventType[] MedicalEvent { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="payeeProvider")]
		public ProviderType PayeeProvider { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="serviceProvider")]
		public ProviderType ServiceProvider { get; set; }
		
		/// <summary>
		/// Required
		/// Max length: 1
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="serviceTypeCode")]
		[System.ComponentModel.DataAnnotations.StringLength(1, MinimumLength=1)]
		public string ServiceTypeCode { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://mcp.medilink/03/2020")]
	public class BBSMedicalEventType
	{
		
		/// <summary>
		/// Required
		/// Max length: 2
		/// Min length: 2
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		[System.ComponentModel.DataAnnotations.StringLength(2, MinimumLength=2)]
		public string Id { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="authorisationDate")]
		public System.DateOnly AuthorisationDate { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="createDateTime")]
		public System.DateTimeOffset CreateDateTime { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="medicalEventDate")]
		public System.DateOnly MedicalEventDate { get; set; }
		
		/// <summary>
		/// Pattern: ^([0-1][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)([.][0-9]*)?(Z|z|(([+]|-)([0-1][0-9]|2[0-3]):[0-5][0-9]))?$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="medicalEventTime")]
		public string MedicalEventTime { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="patient")]
		public MedicarePatientType Patient { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="referral")]
		public ReferralType Referral { get; set; }
		
		/// <summary>
		/// Max length: 1
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="referralOverrideCode")]
		[System.ComponentModel.DataAnnotations.StringLength(1, MinimumLength=1)]
		public string ReferralOverrideCode { get; set; }
		
		/// <summary>
		/// Required
		/// Minimum items: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="service")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public ServiceType[] Service { get; set; }
		
		/// <summary>
		/// Required
		/// Max length: 1
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="submissionAuthorityInd")]
		[System.ComponentModel.DataAnnotations.StringLength(1, MinimumLength=1)]
		public string SubmissionAuthorityInd { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://mcp.medilink/03/2020")]
	public class MedicarePatientType
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="identity")]
		public IdentityType Identity { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="medicare")]
		public MembershipType Medicare { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://mcp.medilink/03/2020")]
	public class ReferralType
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="issueDate")]
		public System.DateOnly IssueDate { get; set; }
		
		/// <summary>
		/// Max length: 2
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="period")]
		[System.ComponentModel.DataAnnotations.StringLength(2, MinimumLength=1)]
		public string Period { get; set; }
		
		/// <summary>
		/// Max length: 1
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="periodCode")]
		[System.ComponentModel.DataAnnotations.StringLength(1, MinimumLength=1)]
		public string PeriodCode { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="provider")]
		public ProviderType Provider { get; set; }
		
		/// <summary>
		/// Required
		/// Max length: 1
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="typeCode")]
		[System.ComponentModel.DataAnnotations.StringLength(1, MinimumLength=1)]
		public string TypeCode { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://mcp.medilink/03/2020")]
	public class ServiceType
	{
		
		/// <summary>
		/// Required
		/// Max length: 4
		/// Min length: 4
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		[System.ComponentModel.DataAnnotations.StringLength(4, MinimumLength=4)]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="accessionDateTime")]
		public System.DateTimeOffset? AccessionDateTime { get; set; }
		
		/// <summary>
		/// Max length: 1
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="aftercareOverrideInd")]
		[System.ComponentModel.DataAnnotations.StringLength(1, MinimumLength=1)]
		public string AftercareOverrideInd { get; set; }
		
		/// <summary>
		/// Max length: 9
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="chargeAmount")]
		[System.ComponentModel.DataAnnotations.StringLength(9, MinimumLength=1)]
		public string ChargeAmount { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="collectionDateTime")]
		public System.DateTimeOffset? CollectionDateTime { get; set; }
		
		/// <summary>
		/// Max length: 1
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="duplicateServiceOverrideInd")]
		[System.ComponentModel.DataAnnotations.StringLength(1, MinimumLength=1)]
		public string DuplicateServiceOverrideInd { get; set; }
		
		/// <summary>
		/// Max length: 2
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fieldQuantity")]
		[System.ComponentModel.DataAnnotations.StringLength(2, MinimumLength=1)]
		public string FieldQuantity { get; set; }
		
		/// <summary>
		/// Max length: 5
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="itemNumber")]
		[System.ComponentModel.DataAnnotations.StringLength(5, MinimumLength=1)]
		public string ItemNumber { get; set; }
		
		/// <summary>
		/// Max length: 6
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lspNumber")]
		[System.ComponentModel.DataAnnotations.StringLength(6, MinimumLength=1)]
		public string LspNumber { get; set; }
		
		/// <summary>
		/// Max length: 1
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="multipleProcedureOverrideInd")]
		[System.ComponentModel.DataAnnotations.StringLength(1, MinimumLength=1)]
		public string MultipleProcedureOverrideInd { get; set; }
		
		/// <summary>
		/// Max length: 2
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="numberOfPatientsSeen")]
		[System.ComponentModel.DataAnnotations.StringLength(2, MinimumLength=1)]
		public string NumberOfPatientsSeen { get; set; }
		
		/// <summary>
		/// Max length: 2
		/// Min length: 2
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="restrictiveOverrideCode")]
		[System.ComponentModel.DataAnnotations.StringLength(2, MinimumLength=2)]
		public string RestrictiveOverrideCode { get; set; }
		
		/// <summary>
		/// Max length: 1
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rule3ExemptInd")]
		[System.ComponentModel.DataAnnotations.StringLength(1, MinimumLength=1)]
		public string Rule3ExemptInd { get; set; }
		
		/// <summary>
		/// Max length: 1
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="s4b3ExemptInd")]
		[System.ComponentModel.DataAnnotations.StringLength(1, MinimumLength=1)]
		public string S4b3ExemptInd { get; set; }
		
		/// <summary>
		/// Max length: 5
		/// Min length: 3
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="scpId")]
		[System.ComponentModel.DataAnnotations.StringLength(5, MinimumLength=3)]
		public string ScpId { get; set; }
		
		/// <summary>
		/// Max length: 2
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="selfDeemedCode")]
		[System.ComponentModel.DataAnnotations.StringLength(2, MinimumLength=1)]
		public string SelfDeemedCode { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="text")]
		public string Text { get; set; }
		
		/// <summary>
		/// Max length: 3
		/// Min length: 3
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="timeDuration")]
		[System.ComponentModel.DataAnnotations.StringLength(3, MinimumLength=3)]
		public string TimeDuration { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://mcp.medilink/03/2020")]
	public class BulkBillStoreForwardResponseType
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="claimId")]
		public string ClaimId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="status")]
		public string Status { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://mcp.medilink/03/2020")]
	public class AlliedHealthClaimRequestType
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="claim")]
		public VAAClaimType Claim { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://mcp.medilink/03/2020")]
	public class VAAClaimType
	{
		
		/// <summary>
		/// Max length: 1
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hospitalInd")]
		[System.ComponentModel.DataAnnotations.StringLength(1, MinimumLength=1)]
		public string HospitalInd { get; set; }
		
		/// <summary>
		/// Required
		/// Minimum items: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="medicalEvent")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public VAAMedicalEventType[] MedicalEvent { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="payeeProvider")]
		public ProviderType PayeeProvider { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="serviceProvider")]
		public ProviderType ServiceProvider { get; set; }
		
		/// <summary>
		/// Required
		/// Max length: 1
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="serviceTypeCode")]
		[System.ComponentModel.DataAnnotations.StringLength(1, MinimumLength=1)]
		public string ServiceTypeCode { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://mcp.medilink/03/2020")]
	public class VAAMedicalEventType
	{
		
		/// <summary>
		/// Required
		/// Max length: 2
		/// Min length: 2
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		[System.ComponentModel.DataAnnotations.StringLength(2, MinimumLength=2)]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="acceptedDisability")]
		public AcceptedDisabilityType AcceptedDisability { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="authorisationDate")]
		public System.DateOnly AuthorisationDate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="breakInEpisodeEndDate")]
		public System.DateOnly? BreakInEpisodeEndDate { get; set; }
		
		/// <summary>
		/// Max length: 1
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="breakInEpisodeOfCareNumber")]
		[System.ComponentModel.DataAnnotations.StringLength(1, MinimumLength=1)]
		public string BreakInEpisodeOfCareNumber { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="breakInEpisodeStartDate")]
		public System.DateOnly? BreakInEpisodeStartDate { get; set; }
		
		/// <summary>
		/// Max length: 5
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="numberOfCNCHours")]
		[System.ComponentModel.DataAnnotations.StringLength(5, MinimumLength=1)]
		public string NumberOfCNCHours { get; set; }
		
		/// <summary>
		/// Max length: 3
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="numberOfCNCVisits")]
		[System.ComponentModel.DataAnnotations.StringLength(3, MinimumLength=1)]
		public string NumberOfCNCVisits { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="createDateTime")]
		public System.DateTimeOffset CreateDateTime { get; set; }
		
		/// <summary>
		/// Max length: 5
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="numberOfENHours")]
		[System.ComponentModel.DataAnnotations.StringLength(5, MinimumLength=1)]
		public string NumberOfENHours { get; set; }
		
		/// <summary>
		/// Max length: 3
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="numberOfENVisits")]
		[System.ComponentModel.DataAnnotations.StringLength(3, MinimumLength=1)]
		public string NumberOfENVisits { get; set; }
		
		/// <summary>
		/// Max length: 8
		/// Min length: 8
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="facilityId")]
		[System.ComponentModel.DataAnnotations.StringLength(8, MinimumLength=8)]
		public string FacilityId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="medicalEventDate")]
		public System.DateOnly MedicalEventDate { get; set; }
		
		/// <summary>
		/// Pattern: ^([0-1][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)([.][0-9]*)?(Z|z|(([+]|-)([0-1][0-9]|2[0-3]):[0-5][0-9]))?$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="medicalEventTime")]
		public string MedicalEventTime { get; set; }
		
		/// <summary>
		/// Max length: 5
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="numberOfNSSHours")]
		[System.ComponentModel.DataAnnotations.StringLength(5, MinimumLength=1)]
		public string NumberOfNSSHours { get; set; }
		
		/// <summary>
		/// Max length: 3
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="numberOfNSSVisits")]
		[System.ComponentModel.DataAnnotations.StringLength(3, MinimumLength=1)]
		public string NumberOfNSSVisits { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="patient")]
		public VeteranPatientType Patient { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="referral")]
		public ReferralType Referral { get; set; }
		
		/// <summary>
		/// Max length: 1
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="referralOverrideCode")]
		[System.ComponentModel.DataAnnotations.StringLength(1, MinimumLength=1)]
		public string ReferralOverrideCode { get; set; }
		
		/// <summary>
		/// Max length: 5
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="numberOfRNHours")]
		[System.ComponentModel.DataAnnotations.StringLength(5, MinimumLength=1)]
		public string NumberOfRNHours { get; set; }
		
		/// <summary>
		/// Max length: 3
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="numberOfRNVisits")]
		[System.ComponentModel.DataAnnotations.StringLength(3, MinimumLength=1)]
		public string NumberOfRNVisits { get; set; }
		
		/// <summary>
		/// Required
		/// Minimum items: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="service")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public VAAServiceType[] Service { get; set; }
		
		/// <summary>
		/// Required
		/// Max length: 1
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="submissionAuthorityInd")]
		[System.ComponentModel.DataAnnotations.StringLength(1, MinimumLength=1)]
		public string SubmissionAuthorityInd { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://mcp.medilink/03/2020")]
	public class AcceptedDisabilityType
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="code")]
		public string Code { get; set; }
		
		/// <summary>
		/// Required
		/// Max length: 1
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="ind")]
		[System.ComponentModel.DataAnnotations.StringLength(1, MinimumLength=1)]
		public string Ind { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://mcp.medilink/03/2020")]
	public class VAAServiceType
	{
		
		/// <summary>
		/// Required
		/// Max length: 4
		/// Min length: 4
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		[System.ComponentModel.DataAnnotations.StringLength(4, MinimumLength=4)]
		public string Id { get; set; }
		
		/// <summary>
		/// Max length: 8
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="accountReferenceNumber")]
		[System.ComponentModel.DataAnnotations.StringLength(8, MinimumLength=1)]
		public string AccountReferenceNumber { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="admissionDate")]
		public System.DateOnly? AdmissionDate { get; set; }
		
		/// <summary>
		/// Max length: 7
		/// Min length: 3
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="chargeAmount")]
		[System.ComponentModel.DataAnnotations.StringLength(7, MinimumLength=3)]
		public string ChargeAmount { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="dischargeDate")]
		public System.DateOnly? DischargeDate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="distanceKilometres")]
		public System.Int32? DistanceKilometres { get; set; }
		
		/// <summary>
		/// Max length: 1
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="duplicateServiceOverrideInd")]
		[System.ComponentModel.DataAnnotations.StringLength(1, MinimumLength=1)]
		public string DuplicateServiceOverrideInd { get; set; }
		
		/// <summary>
		/// Required
		/// Max length: 5
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="itemNumber")]
		[System.ComponentModel.DataAnnotations.StringLength(5, MinimumLength=1)]
		public string ItemNumber { get; set; }
		
		/// <summary>
		/// Max length: 1
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="multipleProcedureOverrideInd")]
		[System.ComponentModel.DataAnnotations.StringLength(1, MinimumLength=1)]
		public string MultipleProcedureOverrideInd { get; set; }
		
		/// <summary>
		/// Max length: 2
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="numberOfPatientsSeen")]
		[System.ComponentModel.DataAnnotations.StringLength(2, MinimumLength=1)]
		public string NumberOfPatientsSeen { get; set; }
		
		/// <summary>
		/// Max length: 2
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="numberOfTeeth")]
		[System.ComponentModel.DataAnnotations.StringLength(2, MinimumLength=1)]
		public string NumberOfTeeth { get; set; }
		
		/// <summary>
		/// Max length: 2
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="opticalScriptCode")]
		[System.ComponentModel.DataAnnotations.StringLength(2, MinimumLength=1)]
		public string OpticalScriptCode { get; set; }
		
		/// <summary>
		/// Max length: 2
		/// Min length: 2
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="restrictiveOverrideCode")]
		[System.ComponentModel.DataAnnotations.StringLength(2, MinimumLength=2)]
		public string RestrictiveOverrideCode { get; set; }
		
		/// <summary>
		/// Max length: 1
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="secondDeviceInd")]
		[System.ComponentModel.DataAnnotations.StringLength(1, MinimumLength=1)]
		public string SecondDeviceInd { get; set; }
		
		/// <summary>
		/// Max length: 2
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="selfDeemedCode")]
		[System.ComponentModel.DataAnnotations.StringLength(2, MinimumLength=1)]
		public string SelfDeemedCode { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="text")]
		public string Text { get; set; }
		
		/// <summary>
		/// Max length: 3
		/// Min length: 3
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="timeDuration")]
		[System.ComponentModel.DataAnnotations.StringLength(3, MinimumLength=3)]
		public string TimeDuration { get; set; }
		
		/// <summary>
		/// Max length: 2
		/// Min length: 2
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="toothNumber")]
		[System.ComponentModel.DataAnnotations.StringLength(2, MinimumLength=2)]
		public string ToothNumber { get; set; }
		
		/// <summary>
		/// Max length: 3
		/// Min length: 3
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="upperLowerJawCode")]
		[System.ComponentModel.DataAnnotations.StringLength(3, MinimumLength=3)]
		public string UpperLowerJawCode { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://mcp.medilink/03/2020")]
	public class VeteranPatientType : PatientType
	{
		
		[System.Runtime.Serialization.DataMember(Name="veteranMembership")]
		public VeteranMembershipType VeteranMembership { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://mcp.medilink/03/2020")]
	public class VeteranMembershipType
	{
		
		/// <summary>
		/// Required
		/// Max length: 9
		/// Min length: 3
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="veteranNumber")]
		[System.ComponentModel.DataAnnotations.StringLength(9, MinimumLength=3)]
		public string VeteranNumber { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://mcp.medilink/03/2020")]
	public class PatientType
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="identity")]
		public IdentityType Identity { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="residentialAddress")]
		public AddressType ResidentialAddress { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://mcp.medilink/03/2020")]
	public class AddressType
	{
		
		/// <summary>
		/// Max length: 40
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="addressLineOne")]
		[System.ComponentModel.DataAnnotations.StringLength(40, MinimumLength=1)]
		public string AddressLineOne { get; set; }
		
		/// <summary>
		/// Max length: 40
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="addressLineTwo")]
		[System.ComponentModel.DataAnnotations.StringLength(40, MinimumLength=1)]
		public string AddressLineTwo { get; set; }
		
		/// <summary>
		/// Max length: 40
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="locality")]
		[System.ComponentModel.DataAnnotations.StringLength(40, MinimumLength=1)]
		public string Locality { get; set; }
		
		/// <summary>
		/// Max length: 4
		/// Min length: 4
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="postcode")]
		[System.ComponentModel.DataAnnotations.StringLength(4, MinimumLength=4)]
		public string Postcode { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://mcp.medilink/03/2020")]
	public class AlliedHealthClaimResponseType
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="claimId")]
		public string ClaimId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="status")]
		public string Status { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://mcp.medilink/03/2020")]
	public class DVAClaimRequestType
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="claim")]
		public DVAClaimType Claim { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://mcp.medilink/03/2020")]
	public class DVAClaimType
	{
		
		/// <summary>
		/// Max length: 1
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hospitalInd")]
		[System.ComponentModel.DataAnnotations.StringLength(1, MinimumLength=1)]
		public string HospitalInd { get; set; }
		
		/// <summary>
		/// Required
		/// Max length: 1
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="serviceTypeCode")]
		[System.ComponentModel.DataAnnotations.StringLength(1, MinimumLength=1)]
		public string ServiceTypeCode { get; set; }
		
		/// <summary>
		/// Required
		/// Minimum items: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="medicalEvent")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public DVAMedicalEventType[] MedicalEvent { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="serviceProvider")]
		public ProviderType ServiceProvider { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="payeeProvider")]
		public ProviderType PayeeProvider { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://mcp.medilink/03/2020")]
	public class DVAMedicalEventType
	{
		
		/// <summary>
		/// Required
		/// Max length: 2
		/// Min length: 2
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		[System.ComponentModel.DataAnnotations.StringLength(2, MinimumLength=2)]
		public string Id { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="authorisationDate")]
		public System.DateOnly AuthorisationDate { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="createDateTime")]
		public System.DateTimeOffset CreateDateTime { get; set; }
		
		/// <summary>
		/// Max length: 8
		/// Min length: 8
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="facilityId")]
		[System.ComponentModel.DataAnnotations.StringLength(8, MinimumLength=8)]
		public string FacilityId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="medicalEventDate")]
		public System.DateOnly MedicalEventDate { get; set; }
		
		/// <summary>
		/// Pattern: ^([0-1][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)([.][0-9]*)?(Z|z|(([+]|-)([0-1][0-9]|2[0-3]):[0-5][0-9]))?$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="medicalEventTime")]
		public string MedicalEventTime { get; set; }
		
		/// <summary>
		/// Max length: 1
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="referralOverrideCode")]
		[System.ComponentModel.DataAnnotations.StringLength(1, MinimumLength=1)]
		public string ReferralOverrideCode { get; set; }
		
		/// <summary>
		/// Required
		/// Max length: 1
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="submissionAuthorityInd")]
		[System.ComponentModel.DataAnnotations.StringLength(1, MinimumLength=1)]
		public string SubmissionAuthorityInd { get; set; }
		
		/// <summary>
		/// Max length: 1
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="treatmentLocationCode")]
		[System.ComponentModel.DataAnnotations.StringLength(1, MinimumLength=1)]
		public string TreatmentLocationCode { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="acceptedDisability")]
		public AcceptedDisabilityType AcceptedDisability { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="referral")]
		public ReferralType Referral { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="patient")]
		public VeteranPatientType Patient { get; set; }
		
		/// <summary>
		/// Required
		/// Minimum items: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="service")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public DVAServiceType[] Service { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://mcp.medilink/03/2020")]
	public class DVAServiceType : ServiceType
	{
		
		/// <summary>
		/// Max length: 8
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="accountReferenceNumber")]
		[System.ComponentModel.DataAnnotations.StringLength(8, MinimumLength=1)]
		public string AccountReferenceNumber { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="distanceKilometres")]
		public System.Int32? DistanceKilometres { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://mcp.medilink/03/2020")]
	public class DVAClaimResponseType
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="claimId")]
		public string ClaimId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="status")]
		public string Status { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://mcp.medilink/03/2020")]
	public class DVAReportRequestType
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="payeeProvider")]
		public ProviderType PayeeProvider { get; set; }
		
		/// <summary>
		/// Max length: 6
		/// Min length: 6
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="claimId")]
		[System.ComponentModel.DataAnnotations.StringLength(6, MinimumLength=6)]
		public string ClaimId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lodgementDate")]
		public System.DateOnly? LodgementDate { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://mcp.medilink/03/2020")]
	public class DVAPaymentReportResponseType
	{
		
		[System.Runtime.Serialization.DataMember(Name="paymentRun")]
		public PaymentRunType PaymentRun { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="paymentInfo")]
		public PaymentType PaymentInfo { get; set; }
		
		/// <summary>
		/// Minimum items: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="claimSummary")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public ClaimSummaryType[] ClaimSummary { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="status")]
		public string Status { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://mcp.medilink/03/2020")]
	public class DVAProcessingReportResponseType
	{
		
		[System.Runtime.Serialization.DataMember(Name="claimAssessment")]
		public DVAClaimAssessmentType ClaimAssessment { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="status")]
		public string Status { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://mcp.medilink/03/2020")]
	public class DVAClaimAssessmentType
	{
		
		/// <summary>
		/// Minimum items: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="medicalEvent")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public DVAMedicalEventAssessmentType[] MedicalEvent { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="serviceProvider")]
		public ProviderType ServiceProvider { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="benefitPaid")]
		public string BenefitPaid { get; set; }
		
		/// <summary>
		/// Max length: 9
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="chargeAmount")]
		[System.ComponentModel.DataAnnotations.StringLength(9, MinimumLength=1)]
		public string ChargeAmount { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="claimId")]
		public string ClaimId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://mcp.medilink/03/2020")]
	public class DVAMedicalEventAssessmentType
	{
		
		[System.Runtime.Serialization.DataMember(Name="patient")]
		public VeteranMembershipStatusType Patient { get; set; }
		
		/// <summary>
		/// Minimum items: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="service")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public DVAServiceAssessmentType[] Service { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="eventDate")]
		public System.DateOnly? EventDate { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://mcp.medilink/03/2020")]
	public class VeteranMembershipStatusType
	{
		
		[System.Runtime.Serialization.DataMember(Name="currentMembership")]
		public VeteranMembershipResponseType CurrentMembership { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="currentMember")]
		public IdentityType CurrentMember { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public StatusType Status { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="processDate")]
		public System.DateOnly? ProcessDate { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://mcp.medilink/03/2020")]
	public class DVAServiceAssessmentType
	{
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="accountReferenceNumber")]
		public string AccountReferenceNumber { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="assessmentCode")]
		public string AssessmentCode { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="benefitPaid")]
		public string BenefitPaid { get; set; }
		
		/// <summary>
		/// Max length: 9
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="chargeAmount")]
		[System.ComponentModel.DataAnnotations.StringLength(9, MinimumLength=1)]
		public string ChargeAmount { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="gstInd")]
		public string GstInd { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="itemNumber")]
		public string ItemNumber { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="numberOfPatientsSeen")]
		public string NumberOfPatientsSeen { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://mcp.medilink/03/2020")]
	public class VeteranMembershipResponseType : VeteranMembershipType
	{
		
		[System.Runtime.Serialization.DataMember(Name="entitlementCode")]
		public string EntitlementCode { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://mcp.medilink/03/2020")]
	public class EnterpriseConcessionVerificationRequestType
	{
		
		[System.Runtime.Serialization.DataMember(Name="timeout")]
		public System.Int32? Timeout { get; set; }
		
		/// <summary>
		/// Required
		/// Minimum items: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="concessionVerificationRequest")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public ReferenceConcessionVerificationRequestType[] ConcessionVerificationRequest { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://mcp.medilink/03/2020")]
	public class ReferenceConcessionVerificationRequestType : ConcessionVerificationRequestType
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://mcp.medilink/03/2020")]
	public class ConcessionVerificationRequestType
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="patient")]
		public MedicarePatientType Patient { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="dateOfService")]
		public System.DateOnly? DateOfService { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://mcp.medilink/03/2020")]
	public class EnterpriseConcessionVerificationResponseType
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="status")]
		public string Status { get; set; }
		
		/// <summary>
		/// Minimum items: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="concessionVerificationResponse")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public ReferenceConcessionVerificationResponseType[] ConcessionVerificationResponse { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://mcp.medilink/03/2020")]
	public class ReferenceConcessionVerificationResponseType : ConcessionVerificationResponseType
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://mcp.medilink/03/2020")]
	public class ConcessionVerificationResponseType
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="medicareStatus")]
		public MembershipStatusType MedicareStatus { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="concessionStatus")]
		public ConcessionStatusType ConcessionStatus { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://mcp.medilink/03/2020")]
	public class ConcessionStatusType
	{
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public StatusType Status { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="processDate")]
		public System.DateOnly? ProcessDate { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://mcp.medilink/03/2020")]
	public class EnterprisePatientVerificationRequestType
	{
		
		[System.Runtime.Serialization.DataMember(Name="timeout")]
		public System.Int32? Timeout { get; set; }
		
		/// <summary>
		/// Required
		/// Minimum items: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="patientVerificationRequest")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public ReferencePatientVerificationRequestType[] PatientVerificationRequest { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://mcp.medilink/03/2020")]
	public class ReferencePatientVerificationRequestType : PatientVerificationRequestType
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://mcp.medilink/03/2020")]
	public class PatientVerificationRequestType
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="patient")]
		public FundPatientType Patient { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="provider")]
		public ProviderType Provider { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="dateOfService")]
		public System.DateOnly? DateOfService { get; set; }
		
		/// <summary>
		/// Required
		/// Max length: 3
		/// Min length: 3
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="typeCode")]
		[System.ComponentModel.DataAnnotations.StringLength(3, MinimumLength=3)]
		public string TypeCode { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://mcp.medilink/03/2020")]
	public class FundPatientType : PatientType
	{
		
		[System.Runtime.Serialization.DataMember(Name="alsoKnownAs")]
		public IdentityType AlsoKnownAs { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="medicare")]
		public MembershipType Medicare { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="healthFund")]
		public FundMembershipType HealthFund { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://mcp.medilink/03/2020")]
	public class FundMembershipType
	{
		
		/// <summary>
		/// Max length: 19
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="memberNumber")]
		[System.ComponentModel.DataAnnotations.StringLength(19, MinimumLength=1)]
		public string MemberNumber { get; set; }
		
		/// <summary>
		/// Max length: 2
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="memberRefNumber")]
		[System.ComponentModel.DataAnnotations.StringLength(2, MinimumLength=1)]
		public string MemberRefNumber { get; set; }
		
		/// <summary>
		/// Max length: 3
		/// Min length: 3
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="organisation")]
		[System.ComponentModel.DataAnnotations.StringLength(3, MinimumLength=3)]
		public string Organisation { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://mcp.medilink/03/2020")]
	public class EnterprisePatientVerificationResponseType
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="status")]
		public string Status { get; set; }
		
		/// <summary>
		/// Minimum items: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="patientVerificationResponse")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public ReferencePatientVerificationResponseType[] PatientVerificationResponse { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://mcp.medilink/03/2020")]
	public class ReferencePatientVerificationResponseType : PatientVerificationResponseType
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://mcp.medilink/03/2020")]
	public class PatientVerificationResponseType
	{
		
		[System.Runtime.Serialization.DataMember(Name="medicareStatus")]
		public MembershipStatusType MedicareStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="healthFundStatus")]
		public FundMembershipStatusType HealthFundStatus { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://mcp.medilink/03/2020")]
	public class FundMembershipStatusType
	{
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public StatusType Status { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="currentMembership")]
		public FundMembershipType CurrentMembership { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="currentMember")]
		public IdentityType CurrentMember { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="processDate")]
		public System.DateOnly? ProcessDate { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://mcp.medilink/03/2020")]
	public class EnterpriseVeteranVerificationRequestType
	{
		
		[System.Runtime.Serialization.DataMember(Name="timeout")]
		public System.Int32? Timeout { get; set; }
		
		/// <summary>
		/// Required
		/// Minimum items: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="veteranVerificationRequest")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public ReferenceVeteranVerificationRequestType[] VeteranVerificationRequest { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://mcp.medilink/03/2020")]
	public class ReferenceVeteranVerificationRequestType : VeteranVerificationRequestType
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://mcp.medilink/03/2020")]
	public class VeteranVerificationRequestType
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="patient")]
		public VeteranPatientType Patient { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://mcp.medilink/03/2020")]
	public class EnterpriseVeteranVerificationResponseType
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="status")]
		public string Status { get; set; }
		
		/// <summary>
		/// Minimum items: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="veteranVerificationResponse")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public ReferenceVeteranVerificationResponseType[] VeteranVerificationResponse { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://mcp.medilink/03/2020")]
	public class ReferenceVeteranVerificationResponseType : VeteranVerificationResponseType
	{
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://mcp.medilink/03/2020")]
	public class VeteranVerificationResponseType
	{
		
		[System.Runtime.Serialization.DataMember(Name="veteranStatus")]
		public VeteranMembershipStatusType VeteranStatus { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://mcp.medilink/03/2020")]
	public class PatientClaimInteractiveRequestType
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="patientClaimInteractive")]
		public PatientClaimInteractiveType PatientClaimInteractive { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://mcp.medilink/03/2020")]
	public class PatientClaimInteractiveType
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="patient")]
		public MedicarePatientType Patient { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="referral")]
		public ReferralType Referral { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="claimant")]
		public ClaimantType Claimant { get; set; }
		
		/// <summary>
		/// Required
		/// Minimum items: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="medicalEvent")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public PCIMedicalEventType[] MedicalEvent { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="payeeProvider")]
		public ProviderType PayeeProvider { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="serviceProvider")]
		public ProviderType ServiceProvider { get; set; }
		
		/// <summary>
		/// Max length: 1
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="referralOverrideCode")]
		[System.ComponentModel.DataAnnotations.StringLength(1, MinimumLength=1)]
		public string ReferralOverrideCode { get; set; }
		
		/// <summary>
		/// Required
		/// Max length: 1
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="accountPaidInd")]
		[System.ComponentModel.DataAnnotations.StringLength(1, MinimumLength=1)]
		public string AccountPaidInd { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="accountReferenceId")]
		public string AccountReferenceId { get; set; }
		
		/// <summary>
		/// Required
		/// Max length: 1
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="submissionAuthorityInd")]
		[System.ComponentModel.DataAnnotations.StringLength(1, MinimumLength=1)]
		public string SubmissionAuthorityInd { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="authorisationDate")]
		public System.DateOnly AuthorisationDate { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://mcp.medilink/03/2020")]
	public class PCIMedicalEventType
	{
		
		/// <summary>
		/// Required
		/// Minimum items: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="service")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public PCIServiceType[] Service { get; set; }
		
		/// <summary>
		/// Required
		/// Max length: 2
		/// Min length: 2
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		[System.ComponentModel.DataAnnotations.StringLength(2, MinimumLength=2)]
		public string Id { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="medicalEventDate")]
		public System.DateOnly MedicalEventDate { get; set; }
		
		/// <summary>
		/// Pattern: ^([0-1][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)([.][0-9]*)?(Z|z|(([+]|-)([0-1][0-9]|2[0-3]):[0-5][0-9]))?$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="medicalEventTime")]
		public string MedicalEventTime { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://mcp.medilink/03/2020")]
	public class PCIServiceType : ServiceType
	{
		
		/// <summary>
		/// Max length: 7
		/// Min length: 3
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="patientContribAmount")]
		[System.ComponentModel.DataAnnotations.StringLength(7, MinimumLength=3)]
		public string PatientContribAmount { get; set; }
		
		/// <summary>
		/// Max length: 8
		/// Min length: 8
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="facilityId")]
		[System.ComponentModel.DataAnnotations.StringLength(8, MinimumLength=8)]
		public string FacilityId { get; set; }
		
		/// <summary>
		/// Max length: 1
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hospitalInd")]
		[System.ComponentModel.DataAnnotations.StringLength(1, MinimumLength=1)]
		public string HospitalInd { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://mcp.medilink/03/2020")]
	public class ClaimantType : MedicarePatientType
	{
		
		[System.Runtime.Serialization.DataMember(Name="eftDetails")]
		public BankAccountType EftDetails { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="residentialAddress")]
		public AddressType ResidentialAddress { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="contactDetails")]
		public ContactType ContactDetails { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://mcp.medilink/03/2020")]
	public class ContactType
	{
		
		/// <summary>
		/// Max length: 128
		/// Min length: 5
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="emailAddress")]
		[System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength=5)]
		public string EmailAddress { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Max length: 19
		/// Min length: 8
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="phoneNumber")]
		[System.ComponentModel.DataAnnotations.StringLength(19, MinimumLength=8)]
		public string PhoneNumber { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://mcp.medilink/03/2020")]
	public class PatientClaimInteractiveResponseType
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="claimAssessment")]
		public PCIAssessmentType ClaimAssessment { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="status")]
		public string Status { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://mcp.medilink/03/2020")]
	public class PCIAssessmentType
	{
		
		[System.Runtime.Serialization.DataMember(Name="claimant")]
		public CurrentMembershipType Claimant { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="patient")]
		public CurrentMembershipType Patient { get; set; }
		
		/// <summary>
		/// Minimum items: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="medicalEvent")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public PCIMedicalEventResponseType[] MedicalEvent { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="error")]
		public StatusType Error { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="claimId")]
		public string ClaimId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://mcp.medilink/03/2020")]
	public class CurrentMembershipType
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="currentMembership")]
		public MembershipType CurrentMembership { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://mcp.medilink/03/2020")]
	public class PCIMedicalEventResponseType
	{
		
		/// <summary>
		/// Minimum items: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="service")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public ServiceResponseType[] Service { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="eventDate")]
		public System.DateOnly? EventDate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://mcp.medilink/03/2020")]
	public class RetrieveReportRequestType
	{
		
		/// <summary>
		/// Required
		/// Minimum items: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transactionId")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string[] TransactionId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://mcp.medilink/03/2020")]
	public class RetrieveReportResponseType
	{
		
		/// <summary>
		/// Minimum items: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="content")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public ContentType[] Content { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://mcp.medilink/03/2020")]
	public class ContentType
	{
		
		[System.Runtime.Serialization.DataMember(Name="transactionId")]
		public string TransactionId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public string Status { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://mcp.medilink/03/2020")]
	public class EnterpriseConcessionVerificationReportContentType : ContentType
	{
		
		[System.Runtime.Serialization.DataMember(Name="report")]
		public EnterpriseConcessionVerificationResponseType Report { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://mcp.medilink/03/2020")]
	public class EnterprisePatientVerificationReportContentType : ContentType
	{
		
		[System.Runtime.Serialization.DataMember(Name="report")]
		public EnterprisePatientVerificationResponseType Report { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://mcp.medilink/03/2020")]
	public class EnterpriseVeteranVerificationReportContentType : ContentType
	{
		
		[System.Runtime.Serialization.DataMember(Name="report")]
		public EnterpriseVeteranVerificationResponseType Report { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://mcp.medilink/03/2020")]
	public class SameDayDeleteRequestType
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sameDayDelete")]
		public SameDayDeleteType SameDayDelete { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://mcp.medilink/03/2020")]
	public class SameDayDeleteType
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="patient")]
		public MedicarePatientType Patient { get; set; }
		
		/// <summary>
		/// Required
		/// Max length: 3
		/// Min length: 3
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="reasonCode")]
		[System.ComponentModel.DataAnnotations.StringLength(3, MinimumLength=3)]
		public string ReasonCode { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://mcp.medilink/03/2020")]
	public class SameDayDeleteResponseType
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="status")]
		public string Status { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://mcp.medilink/03/2020")]
	public class StatusReportRequestType
	{
		
		/// <summary>
		/// Minimum items: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="transactionId")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string[] TransactionId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="associateName")]
		public string AssociateName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="fromDateTime")]
		public System.DateTimeOffset? FromDateTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="toDateTime")]
		public System.DateTimeOffset? ToDateTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="reportStatus")]
		public string ReportStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="requestTransmissionType")]
		public string RequestTransmissionType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public string Status { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://mcp.medilink/03/2020")]
	public class StatusReportResponseType
	{
		
		/// <summary>
		/// Minimum items: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="transactionStatus")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public TransactionStatusType[] TransactionStatus { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="status")]
		public string Status { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://mcp.medilink/03/2020")]
	public class TransactionStatusType
	{
		
		[System.Runtime.Serialization.DataMember(Name="associateName")]
		public string AssociateName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lodgementDateTime")]
		public System.DateTimeOffset? LodgementDateTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="processStatus")]
		public string ProcessStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="reference")]
		public string Reference { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="reportStatus")]
		public string ReportStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="requestTransmissionType")]
		public string RequestTransmissionType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transactionId")]
		public string TransactionId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://mcp.medilink/03/2020")]
	public class BulkBillEasyclaimIntegratedReportRequestType
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="payeeProvider")]
		public ProviderType PayeeProvider { get; set; }
		
		/// <summary>
		/// Required
		/// Minimum items: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transactionId")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string[] TransactionId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://mcp.medilink/03/2020")]
	public class BulkBillEasyclaimIntegratedReportResponseType
	{
		
		/// <summary>
		/// Required
		/// Minimum items: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="report")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public BulkBillEasyclaimReportType[] Report { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://mcp.medilink/03/2020")]
	public class BulkBillEasyclaimReportType
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transactionId")]
		public string TransactionId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="status")]
		public string Status { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="claimId")]
		public string ClaimId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="dateOfLodgement")]
		public System.DateOnly? DateOfLodgement { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="benefitPaid")]
		public string BenefitPaid { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="chargeAmount")]
		public string ChargeAmount { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="payeeProvider")]
		public ProviderType PayeeProvider { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="processingReport")]
		public BbeProcessingReportType ProcessingReport { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="paymentReport")]
		public BbePaymentReportType PaymentReport { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://mcp.medilink/03/2020")]
	public class BbeProcessingReportType
	{
		
		[System.Runtime.Serialization.DataMember(Name="patient")]
		public MembershipStatusType Patient { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="serviceProvider")]
		public ProviderType ServiceProvider { get; set; }
		
		/// <summary>
		/// Minimum items: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="service")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public BbeServiceReportType[] Service { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://mcp.medilink/03/2020")]
	public class BbeServiceReportType : ServiceResponseType
	{
		
		[System.Runtime.Serialization.DataMember(Name="dateOfService")]
		public System.DateOnly? DateOfService { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://mcp.medilink/03/2020")]
	public class BbePaymentReportType
	{
		
		[System.Runtime.Serialization.DataMember(Name="paymentRun")]
		public PaymentRunType PaymentRun { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="paymentInfo")]
		public PaymentType PaymentInfo { get; set; }
	}
	
	public partial class McpClient
	{
		
		private System.Net.Http.HttpClient client;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public McpClient(System.Net.Http.HttpClient client, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (client == null)
				throw new ArgumentNullException("Null HttpClient.", "client");

			if (client.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "client");

			this.client = client;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// This is the request
		/// McpBulkBillPaymentReport mcp/bulkbillpaymentreport/v1
		/// </summary>
		/// <returns>successful operation</returns>
		public async Task<BBSPaymentReportResponseType> BulkBillPaymentReportAsync(BBSReportRequestType requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mcp/bulkbillpaymentreport/v1";
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await client.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<BBSPaymentReportResponseType>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// This is the request
		/// McpBulkBillProcessingReport mcp/bulkbillprocessingreport/v1
		/// </summary>
		/// <returns>successful operation</returns>
		public async Task<BBSProcessingReportResponseType> BulkBillProcessingReportAsync(BBSReportRequestType requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mcp/bulkbillprocessingreport/v1";
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await client.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<BBSProcessingReportResponseType>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// This is the request
		/// McpBulkBillStoreForwardGeneral mcp/bulkbillstoreforward/general/v1
		/// </summary>
		/// <returns>successful operation</returns>
		public async Task<BulkBillStoreForwardResponseType> BulkBillStoreForwardGeneralAsync(BulkBillStoreForwardRequestType requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mcp/bulkbillstoreforward/general/v1";
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await client.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<BulkBillStoreForwardResponseType>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// This is the request
		/// McpBulkBillStoreForwardPathology mcp/bulkbillstoreforward/pathology/v1
		/// </summary>
		/// <returns>successful operation</returns>
		public async Task<BulkBillStoreForwardResponseType> BulkBillStoreForwardPathologyAsync(BulkBillStoreForwardRequestType requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mcp/bulkbillstoreforward/pathology/v1";
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await client.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<BulkBillStoreForwardResponseType>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// This is the request
		/// McpBulkBillStoreForwardSpecialist mcp/bulkbillstoreforward/specialist/v1
		/// </summary>
		/// <returns>successful operation</returns>
		public async Task<BulkBillStoreForwardResponseType> BulkBillStoreForwardSpecialistAsync(BulkBillStoreForwardRequestType requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mcp/bulkbillstoreforward/specialist/v1";
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await client.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<BulkBillStoreForwardResponseType>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// This is the request
		/// McpDvaAlliedHealthAllied mcp/dvaalliedhealth/allied/v1
		/// </summary>
		/// <returns>successful operation</returns>
		public async Task<AlliedHealthClaimResponseType> DvaAlliedHealthAlliedAsync(AlliedHealthClaimRequestType requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mcp/dvaalliedhealth/allied/v1";
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await client.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<AlliedHealthClaimResponseType>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// This is the request
		/// McpDvaAlliedHealthCommunityNursing mcp/dvaalliedhealth/communitynursing/v1
		/// </summary>
		/// <returns>successful operation</returns>
		public async Task<AlliedHealthClaimResponseType> DvaAlliedHealthCommunityNursingAsync(AlliedHealthClaimRequestType requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mcp/dvaalliedhealth/communitynursing/v1";
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await client.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<AlliedHealthClaimResponseType>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// This is the request
		/// McpDvaAlliedHealthDental mcp/dvaalliedhealth/dental/v1
		/// </summary>
		/// <returns>successful operation</returns>
		public async Task<AlliedHealthClaimResponseType> DvaAlliedHealthDentalAsync(AlliedHealthClaimRequestType requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mcp/dvaalliedhealth/dental/v1";
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await client.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<AlliedHealthClaimResponseType>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// This is the request
		/// McpDvaAlliedHealthOptical mcp/dvaalliedhealth/optical/v1
		/// </summary>
		/// <returns>successful operation</returns>
		public async Task<AlliedHealthClaimResponseType> DvaAlliedHealthOpticalAsync(AlliedHealthClaimRequestType requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mcp/dvaalliedhealth/optical/v1";
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await client.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<AlliedHealthClaimResponseType>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// This is the request
		/// McpDvaAlliedHealthPsych mcp/dvaalliedhealth/psych/v1
		/// </summary>
		/// <returns>successful operation</returns>
		public async Task<AlliedHealthClaimResponseType> DvaAlliedHealthPsychAsync(AlliedHealthClaimRequestType requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mcp/dvaalliedhealth/psych/v1";
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await client.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<AlliedHealthClaimResponseType>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// This is the request
		/// McpDvaAlliedHealthSpeechPathology mcp/dvaalliedhealth/speechpathology/v1
		/// </summary>
		/// <returns>successful operation</returns>
		public async Task<AlliedHealthClaimResponseType> DvaAlliedHealthSpeechPathologyAsync(AlliedHealthClaimRequestType requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mcp/dvaalliedhealth/speechpathology/v1";
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await client.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<AlliedHealthClaimResponseType>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// This is the request
		/// McpDvaClaimGeneral mcp/dvaclaim/general/v1
		/// </summary>
		/// <returns>successful operation</returns>
		public async Task<DVAClaimResponseType> DvaClaimGeneralAsync(DVAClaimRequestType requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mcp/dvaclaim/general/v1";
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await client.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DVAClaimResponseType>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// This is the request
		/// McpDvaClaimPathology mcp/dvaclaim/pathology/v1
		/// </summary>
		/// <returns>successful operation</returns>
		public async Task<DVAClaimResponseType> DvaClaimPathologyAsync(DVAClaimRequestType requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mcp/dvaclaim/pathology/v1";
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await client.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DVAClaimResponseType>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// This is the request
		/// McpDvaClaimSpecialist mcp/dvaclaim/specialist/v1
		/// </summary>
		/// <returns>successful operation</returns>
		public async Task<DVAClaimResponseType> DvaClaimSpecialistAsync(DVAClaimRequestType requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mcp/dvaclaim/specialist/v1";
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await client.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DVAClaimResponseType>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// This is the request
		/// McpDvaPaymentReport mcp/dvapaymentreport/v1
		/// </summary>
		/// <returns>successful operation</returns>
		public async Task<DVAPaymentReportResponseType> DvaPaymentReportAsync(DVAReportRequestType requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mcp/dvapaymentreport/v1";
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await client.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DVAPaymentReportResponseType>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// This is the request
		/// McpDvaProcessingReport mcp/dvaprocessingreport/v1
		/// </summary>
		/// <returns>successful operation</returns>
		public async Task<DVAProcessingReportResponseType> DvaProcessingReportAsync(DVAReportRequestType requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mcp/dvaprocessingreport/v1";
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await client.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DVAProcessingReportResponseType>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// This is the request
		/// McpEnterpriseConcessionVerification mcp/enterpriseconcessionverification/v1
		/// </summary>
		/// <returns>successful operation</returns>
		public async Task<EnterpriseConcessionVerificationResponseType> EnterpriseConcessionVerificationAsync(EnterpriseConcessionVerificationRequestType requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mcp/enterpriseconcessionverification/v1";
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await client.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<EnterpriseConcessionVerificationResponseType>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// This is the request
		/// McpEnterprisePatientVerification mcp/enterprisepatientverification/v1
		/// </summary>
		/// <returns>successful operation</returns>
		public async Task<EnterprisePatientVerificationResponseType> EnterprisePatientVerificationAsync(EnterprisePatientVerificationRequestType requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mcp/enterprisepatientverification/v1";
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await client.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<EnterprisePatientVerificationResponseType>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// This is the request
		/// McpEnterpriseVeteranVerification mcp/enterpriseveteranverification/v1
		/// </summary>
		/// <returns>successful operation</returns>
		public async Task<EnterpriseVeteranVerificationResponseType> EnterpriseVeteranVerificationAsync(EnterpriseVeteranVerificationRequestType requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mcp/enterpriseveteranverification/v1";
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await client.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<EnterpriseVeteranVerificationResponseType>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// This is the request
		/// McpPatientClaimInteractiveGeneral mcp/patientclaiminteractive/general/v1
		/// </summary>
		/// <returns>successful operation</returns>
		public async Task<PatientClaimInteractiveResponseType> PatientClaimInteractiveGeneralAsync(PatientClaimInteractiveRequestType requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mcp/patientclaiminteractive/general/v1";
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await client.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<PatientClaimInteractiveResponseType>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// This is the request
		/// McpPatientClaimInteractivePathology mcp/patientclaiminteractive/pathology/v1
		/// </summary>
		/// <returns>successful operation</returns>
		public async Task<PatientClaimInteractiveResponseType> PatientClaimInteractivePathologyAsync(PatientClaimInteractiveRequestType requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mcp/patientclaiminteractive/pathology/v1";
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await client.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<PatientClaimInteractiveResponseType>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// This is the request
		/// McpPatientClaimInteractiveSpecialist mcp/patientclaiminteractive/specialist/v1
		/// </summary>
		/// <returns>successful operation</returns>
		public async Task<PatientClaimInteractiveResponseType> PatientClaimInteractiveSpecialistAsync(PatientClaimInteractiveRequestType requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mcp/patientclaiminteractive/specialist/v1";
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await client.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<PatientClaimInteractiveResponseType>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// This is the request
		/// McpPatientVerification mcp/patientverification/v1
		/// </summary>
		/// <returns>successful operation</returns>
		public async Task<PatientVerificationResponseType> PatientVerificationAsync(PatientVerificationRequestType requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mcp/patientverification/v1";
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await client.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<PatientVerificationResponseType>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// This is the request
		/// McpPatientVerificationHf mcp/patientverification/hf/v1
		/// </summary>
		/// <returns>successful operation</returns>
		public async Task<PatientVerificationResponseType> PatientVerificationHfAsync(PatientVerificationRequestType requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mcp/patientverification/hf/v1";
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await client.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<PatientVerificationResponseType>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// This is the request
		/// McpPatientVerificationMedicare mcp/patientverification/medicare/v1
		/// </summary>
		/// <returns>successful operation</returns>
		public async Task<PatientVerificationResponseType> PatientVerificationMedicareAsync(PatientVerificationRequestType requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mcp/patientverification/medicare/v1";
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await client.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<PatientVerificationResponseType>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// This is the request
		/// McpRetrieveReportEcv mcp/enterpriseconcessionverification/retrievereport/v1
		/// </summary>
		/// <returns>successful operation</returns>
		public async Task<RetrieveReportResponseType> RetrieveReportEcvAsync(RetrieveReportRequestType requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mcp/enterpriseconcessionverification/retrievereport/v1";
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await client.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<RetrieveReportResponseType>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// This is the request
		/// McpRetrieveReportEpv mcp/enterprisepatientverification/retrievereport/v1
		/// </summary>
		/// <returns>successful operation</returns>
		public async Task<RetrieveReportResponseType> RetrieveReportEpvAsync(RetrieveReportRequestType requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mcp/enterprisepatientverification/retrievereport/v1";
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await client.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<RetrieveReportResponseType>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// This is the request
		/// McpRetrieveReportEvv mcp/enterpriseveteranverification/retrievereport/v1
		/// </summary>
		/// <returns>successful operation</returns>
		public async Task<RetrieveReportResponseType> RetrieveReportEvvAsync(RetrieveReportRequestType requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mcp/enterpriseveteranverification/retrievereport/v1";
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await client.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<RetrieveReportResponseType>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// This is the request
		/// McpSameDayDelete mcp/samedaydelete/v1
		/// </summary>
		/// <returns>successful operation</returns>
		public async Task<SameDayDeleteResponseType> SameDayDeleteAsync(SameDayDeleteRequestType requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mcp/samedaydelete/v1";
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await client.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<SameDayDeleteResponseType>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// This is the request
		/// McpStatusReport mcp/statusreport/v1
		/// </summary>
		/// <returns>successful operation</returns>
		public async Task<StatusReportResponseType> StatusReportAsync(StatusReportRequestType requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mcp/statusreport/v1";
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await client.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<StatusReportResponseType>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// This is the request
		/// McpVeteranVerification mcp/veteranverification/v1
		/// </summary>
		/// <returns>successful operation</returns>
		public async Task<VeteranVerificationResponseType> VeteranVerificationAsync(VeteranVerificationRequestType requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mcp/veteranverification/v1";
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await client.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<VeteranVerificationResponseType>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// This is the request
		/// McpConcessionVerification mcp/concessionverification/v1
		/// </summary>
		/// <returns>successful operation</returns>
		public async Task<ConcessionVerificationResponseType> ConcessionVerificationAsync(ConcessionVerificationRequestType requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mcp/concessionverification/v1";
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await client.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ConcessionVerificationResponseType>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// This is the request
		/// McpBulkBillIntegratedReport mcp/bulkbillintegratedreport/v1
		/// </summary>
		/// <returns>successful operation</returns>
		public async Task<BulkBillEasyclaimIntegratedReportResponseType> BulkBillIntegratedReportAsync(BulkBillEasyclaimIntegratedReportRequestType requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mcp/bulkbillintegratedreport/v1";
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await client.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<BulkBillEasyclaimIntegratedReportResponseType>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
	}
}


