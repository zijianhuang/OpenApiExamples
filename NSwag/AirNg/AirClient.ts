//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming

import { mergeMap as _observableMergeMap, catchError as _observableCatch } from 'rxjs/operators';
import { Observable, throwError as _observableThrow, of as _observableOf } from 'rxjs';
import { Injectable, Inject, Optional, InjectionToken } from '@angular/core';
import { HttpClient, HttpHeaders, HttpResponse, HttpResponseBase } from '@angular/common/http';

export namespace MyNS {
export const API_BASE_URL = new InjectionToken<string>('API_BASE_URL');

@Injectable()
export class MyClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "https://test.healthclaiming.api.humanservices.gov.au/claiming/ext-vnd/air/immunisation";
    }

    /**
     * Get authorisation access list
     * @param authorization JWT header for authorization
     * @param dhs_auditId DHS Audit ID
     * @param dhs_subjectId DHS Subject ID - Individual Date of birth in DDMMYYYY
     * @param dhs_messageId DHS Message ID
     * @param dhs_auditIdType DHS Audit Type
     * @param dhs_correlationId DHS Correlation ID
     * @param dhs_productId DHS Product ID
     * @param dhs_subjectIdType DHS Subject ID Type
     * @return 200 OK
     */
    airAuthorisationAccessList(body: AirAccessListRequestType, authorization: string, dhs_auditId: string, dhs_subjectId: string, dhs_messageId: string, dhs_auditIdType: string, dhs_correlationId: string, dhs_productId: string, dhs_subjectIdType: string): Observable<AirAccessListResponseType> {
        let url_ = this.baseUrl + "/v1/authorisation/access/list";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Authorization": authorization !== undefined && authorization !== null ? "" + authorization : "",
                "dhs-auditId": dhs_auditId !== undefined && dhs_auditId !== null ? "" + dhs_auditId : "",
                "dhs-subjectId": dhs_subjectId !== undefined && dhs_subjectId !== null ? "" + dhs_subjectId : "",
                "dhs-messageId": dhs_messageId !== undefined && dhs_messageId !== null ? "" + dhs_messageId : "",
                "dhs-auditIdType": dhs_auditIdType !== undefined && dhs_auditIdType !== null ? "" + dhs_auditIdType : "",
                "dhs-correlationId": dhs_correlationId !== undefined && dhs_correlationId !== null ? "" + dhs_correlationId : "",
                "dhs-productId": dhs_productId !== undefined && dhs_productId !== null ? "" + dhs_productId : "",
                "dhs-subjectIdType": dhs_subjectIdType !== undefined && dhs_subjectIdType !== null ? "" + dhs_subjectIdType : "",
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processAirAuthorisationAccessList(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processAirAuthorisationAccessList(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<AirAccessListResponseType>;
                }
            } else
                return _observableThrow(response_) as any as Observable<AirAccessListResponseType>;
        }));
    }

    protected processAirAuthorisationAccessList(response: HttpResponseBase): Observable<AirAccessListResponseType> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            result200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver) as AirAccessListResponseType;
            return _observableOf(result200);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result400: any = null;
            result400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver) as AirAccessListResponseType;
            return throwException("Bad Request", status, _responseText, _headers, result400);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * Identify Individual details request
     * @param authorization JWT header for authorization
     * @param dhs_auditId DHS Audit ID
     * @param dhs_subjectId DHS Subject ID - Individual Date of birth in DDMMYYYY
     * @param dhs_messageId DHS Message ID
     * @param dhs_auditIdType DHS Audit Type
     * @param dhs_correlationId DHS Correlation ID
     * @param dhs_productId DHS Product ID
     * @param dhs_subjectIdType DHS Subject ID Type
     * @return 200 OK
     */
    airImmunisationIndividualDetails(body: IdentifyIndividualRequestType, authorization: string, dhs_auditId: string, dhs_subjectId: string, dhs_messageId: string, dhs_auditIdType: string, dhs_correlationId: string, dhs_productId: string, dhs_subjectIdType: string): Observable<IndividualDetailsResponseType> {
        let url_ = this.baseUrl + "/v1.1/individual/details";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Authorization": authorization !== undefined && authorization !== null ? "" + authorization : "",
                "dhs-auditId": dhs_auditId !== undefined && dhs_auditId !== null ? "" + dhs_auditId : "",
                "dhs-subjectId": dhs_subjectId !== undefined && dhs_subjectId !== null ? "" + dhs_subjectId : "",
                "dhs-messageId": dhs_messageId !== undefined && dhs_messageId !== null ? "" + dhs_messageId : "",
                "dhs-auditIdType": dhs_auditIdType !== undefined && dhs_auditIdType !== null ? "" + dhs_auditIdType : "",
                "dhs-correlationId": dhs_correlationId !== undefined && dhs_correlationId !== null ? "" + dhs_correlationId : "",
                "dhs-productId": dhs_productId !== undefined && dhs_productId !== null ? "" + dhs_productId : "",
                "dhs-subjectIdType": dhs_subjectIdType !== undefined && dhs_subjectIdType !== null ? "" + dhs_subjectIdType : "",
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processAirImmunisationIndividualDetails(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processAirImmunisationIndividualDetails(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<IndividualDetailsResponseType>;
                }
            } else
                return _observableThrow(response_) as any as Observable<IndividualDetailsResponseType>;
        }));
    }

    protected processAirImmunisationIndividualDetails(response: HttpResponseBase): Observable<IndividualDetailsResponseType> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            result200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver) as IndividualDetailsResponseType;
            return _observableOf(result200);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result400: any = null;
            result400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver) as IndividualDetailsResponseType;
            return throwException("Bad Request", status, _responseText, _headers, result400);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * Add additional vaccine indicator request
     * @param authorization JWT header for authorization
     * @param dhs_auditId DHS Audit ID
     * @param dhs_subjectId DHS Subject ID - Individual Date of birth in DDMMYYYY
     * @param dhs_messageId DHS Message ID
     * @param dhs_auditIdType DHS Audit Type
     * @param dhs_correlationId DHS Correlation ID
     * @param dhs_productId DHS Product ID
     * @param dhs_subjectIdType DHS Subject ID Type
     * @return 200 OK
     */
    airImmunisationAdditionalVaccineIndicatorAdd(body: AdditionalVaccineIndicatorRequestType, authorization: string, dhs_auditId: string, dhs_subjectId: string, dhs_messageId: string, dhs_auditIdType: string, dhs_correlationId: string, dhs_productId: string, dhs_subjectIdType: string): Observable<AdditionalVaccineIndicatorResponseType> {
        let url_ = this.baseUrl + "/v1/individual/additional-vaccine-indicator/add";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Authorization": authorization !== undefined && authorization !== null ? "" + authorization : "",
                "dhs-auditId": dhs_auditId !== undefined && dhs_auditId !== null ? "" + dhs_auditId : "",
                "dhs-subjectId": dhs_subjectId !== undefined && dhs_subjectId !== null ? "" + dhs_subjectId : "",
                "dhs-messageId": dhs_messageId !== undefined && dhs_messageId !== null ? "" + dhs_messageId : "",
                "dhs-auditIdType": dhs_auditIdType !== undefined && dhs_auditIdType !== null ? "" + dhs_auditIdType : "",
                "dhs-correlationId": dhs_correlationId !== undefined && dhs_correlationId !== null ? "" + dhs_correlationId : "",
                "dhs-productId": dhs_productId !== undefined && dhs_productId !== null ? "" + dhs_productId : "",
                "dhs-subjectIdType": dhs_subjectIdType !== undefined && dhs_subjectIdType !== null ? "" + dhs_subjectIdType : "",
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processAirImmunisationAdditionalVaccineIndicatorAdd(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processAirImmunisationAdditionalVaccineIndicatorAdd(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<AdditionalVaccineIndicatorResponseType>;
                }
            } else
                return _observableThrow(response_) as any as Observable<AdditionalVaccineIndicatorResponseType>;
        }));
    }

    protected processAirImmunisationAdditionalVaccineIndicatorAdd(response: HttpResponseBase): Observable<AdditionalVaccineIndicatorResponseType> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            result200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver) as AdditionalVaccineIndicatorResponseType;
            return _observableOf(result200);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result400: any = null;
            result400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver) as AdditionalVaccineIndicatorResponseType;
            return throwException("Bad Request", status, _responseText, _headers, result400);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * Remove additional vaccine indicator request
     * @param authorization JWT header for authorization
     * @param dhs_auditId DHS Audit ID
     * @param dhs_subjectId DHS Subject ID - Individual Date of birth in DDMMYYYY
     * @param dhs_messageId DHS Message ID
     * @param dhs_auditIdType DHS Audit Type
     * @param dhs_correlationId DHS Correlation ID
     * @param dhs_productId DHS Product ID
     * @param dhs_subjectIdType DHS Subject ID Type
     * @return 200 OK
     */
    airImmunisationAdditionalVaccineIndicatorRemove(body: AdditionalVaccineIndicatorRequestType, authorization: string, dhs_auditId: string, dhs_subjectId: string, dhs_messageId: string, dhs_auditIdType: string, dhs_correlationId: string, dhs_productId: string, dhs_subjectIdType: string): Observable<AdditionalVaccineIndicatorResponseType> {
        let url_ = this.baseUrl + "/v1/individual/additional-vaccine-indicator/remove";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Authorization": authorization !== undefined && authorization !== null ? "" + authorization : "",
                "dhs-auditId": dhs_auditId !== undefined && dhs_auditId !== null ? "" + dhs_auditId : "",
                "dhs-subjectId": dhs_subjectId !== undefined && dhs_subjectId !== null ? "" + dhs_subjectId : "",
                "dhs-messageId": dhs_messageId !== undefined && dhs_messageId !== null ? "" + dhs_messageId : "",
                "dhs-auditIdType": dhs_auditIdType !== undefined && dhs_auditIdType !== null ? "" + dhs_auditIdType : "",
                "dhs-correlationId": dhs_correlationId !== undefined && dhs_correlationId !== null ? "" + dhs_correlationId : "",
                "dhs-productId": dhs_productId !== undefined && dhs_productId !== null ? "" + dhs_productId : "",
                "dhs-subjectIdType": dhs_subjectIdType !== undefined && dhs_subjectIdType !== null ? "" + dhs_subjectIdType : "",
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processAirImmunisationAdditionalVaccineIndicatorRemove(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processAirImmunisationAdditionalVaccineIndicatorRemove(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<AdditionalVaccineIndicatorResponseType>;
                }
            } else
                return _observableThrow(response_) as any as Observable<AdditionalVaccineIndicatorResponseType>;
        }));
    }

    protected processAirImmunisationAdditionalVaccineIndicatorRemove(response: HttpResponseBase): Observable<AdditionalVaccineIndicatorResponseType> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            result200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver) as AdditionalVaccineIndicatorResponseType;
            return _observableOf(result200);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result400: any = null;
            result400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver) as AdditionalVaccineIndicatorResponseType;
            return throwException("Bad Request", status, _responseText, _headers, result400);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * Get immunisation details request
     * @param authorization JWT header for authorization
     * @param dhs_auditId DHS Audit ID
     * @param dhs_subjectId DHS Subject ID - Individual Date of birth in DDMMYYYY
     * @param dhs_messageId DHS Message ID
     * @param dhs_auditIdType DHS Audit Type
     * @param dhs_correlationId DHS Correlation ID
     * @param dhs_productId DHS Product ID
     * @param dhs_subjectIdType DHS Subject ID Type
     * @return 200 OK
     */
    airImmunisationHistoryDetails(body: AirHistoryRequestType, authorization: string, dhs_auditId: string, dhs_subjectId: string, dhs_messageId: string, dhs_auditIdType: string, dhs_correlationId: string, dhs_productId: string, dhs_subjectIdType: string): Observable<ImmunisationHistoryResponseType> {
        let url_ = this.baseUrl + "/v1.1/individual/immunisation-history/details";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Authorization": authorization !== undefined && authorization !== null ? "" + authorization : "",
                "dhs-auditId": dhs_auditId !== undefined && dhs_auditId !== null ? "" + dhs_auditId : "",
                "dhs-subjectId": dhs_subjectId !== undefined && dhs_subjectId !== null ? "" + dhs_subjectId : "",
                "dhs-messageId": dhs_messageId !== undefined && dhs_messageId !== null ? "" + dhs_messageId : "",
                "dhs-auditIdType": dhs_auditIdType !== undefined && dhs_auditIdType !== null ? "" + dhs_auditIdType : "",
                "dhs-correlationId": dhs_correlationId !== undefined && dhs_correlationId !== null ? "" + dhs_correlationId : "",
                "dhs-productId": dhs_productId !== undefined && dhs_productId !== null ? "" + dhs_productId : "",
                "dhs-subjectIdType": dhs_subjectIdType !== undefined && dhs_subjectIdType !== null ? "" + dhs_subjectIdType : "",
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processAirImmunisationHistoryDetails(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processAirImmunisationHistoryDetails(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ImmunisationHistoryResponseType>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ImmunisationHistoryResponseType>;
        }));
    }

    protected processAirImmunisationHistoryDetails(response: HttpResponseBase): Observable<ImmunisationHistoryResponseType> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            result200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver) as ImmunisationHistoryResponseType;
            return _observableOf(result200);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result400: any = null;
            result400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver) as ImmunisationHistoryResponseType;
            return throwException("Bad Request", status, _responseText, _headers, result400);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * Get Vaccine Trial History
     * @param authorization JWT header for authorization
     * @param dhs_auditId DHS Audit ID
     * @param dhs_subjectId DHS Subject ID - Individual Date of birth in DDMMYYYY
     * @param dhs_messageId DHS Message ID
     * @param dhs_auditIdType DHS Audit Type
     * @param dhs_correlationId DHS Correlation ID
     * @param dhs_productId DHS Product ID
     * @param dhs_subjectIdType DHS Subject ID Type
     * @return 200 OK
     */
    airImmunisationHistoryStatement(body: AirHistoryRequestType, authorization: string, dhs_auditId: string, dhs_subjectId: string, dhs_messageId: string, dhs_auditIdType: string, dhs_correlationId: string, dhs_productId: string, dhs_subjectIdType: string): Observable<ImmunisationHistoryStatementResponseType> {
        let url_ = this.baseUrl + "/v1/individual/immunisation-history/statement";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Authorization": authorization !== undefined && authorization !== null ? "" + authorization : "",
                "dhs-auditId": dhs_auditId !== undefined && dhs_auditId !== null ? "" + dhs_auditId : "",
                "dhs-subjectId": dhs_subjectId !== undefined && dhs_subjectId !== null ? "" + dhs_subjectId : "",
                "dhs-messageId": dhs_messageId !== undefined && dhs_messageId !== null ? "" + dhs_messageId : "",
                "dhs-auditIdType": dhs_auditIdType !== undefined && dhs_auditIdType !== null ? "" + dhs_auditIdType : "",
                "dhs-correlationId": dhs_correlationId !== undefined && dhs_correlationId !== null ? "" + dhs_correlationId : "",
                "dhs-productId": dhs_productId !== undefined && dhs_productId !== null ? "" + dhs_productId : "",
                "dhs-subjectIdType": dhs_subjectIdType !== undefined && dhs_subjectIdType !== null ? "" + dhs_subjectIdType : "",
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processAirImmunisationHistoryStatement(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processAirImmunisationHistoryStatement(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ImmunisationHistoryStatementResponseType>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ImmunisationHistoryStatementResponseType>;
        }));
    }

    protected processAirImmunisationHistoryStatement(response: HttpResponseBase): Observable<ImmunisationHistoryStatementResponseType> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            result200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver) as ImmunisationHistoryStatementResponseType;
            return _observableOf(result200);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result400: any = null;
            result400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver) as ImmunisationHistoryStatementResponseType;
            return throwException("Bad Request", status, _responseText, _headers, result400);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * Update Indigenous Status request
     * @param authorization JWT header for authorization
     * @param dhs_auditId DHS Audit ID
     * @param dhs_subjectId DHS Subject ID - Individual Date of birth in DDMMYYYY
     * @param dhs_messageId DHS Message ID
     * @param dhs_auditIdType DHS Audit Type
     * @param dhs_correlationId DHS Correlation ID
     * @param dhs_productId DHS Product ID
     * @param dhs_subjectIdType DHS Subject ID Type
     * @return 200 OK
     */
    airImmunisationIndigenousStatusUpdate(body: IndigenousStatusRequestType, authorization: string, dhs_auditId: string, dhs_subjectId: string, dhs_messageId: string, dhs_auditIdType: string, dhs_correlationId: string, dhs_productId: string, dhs_subjectIdType: string): Observable<IndigenousStatusResponseType> {
        let url_ = this.baseUrl + "/v1/individual/indigenous-status/update";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Authorization": authorization !== undefined && authorization !== null ? "" + authorization : "",
                "dhs-auditId": dhs_auditId !== undefined && dhs_auditId !== null ? "" + dhs_auditId : "",
                "dhs-subjectId": dhs_subjectId !== undefined && dhs_subjectId !== null ? "" + dhs_subjectId : "",
                "dhs-messageId": dhs_messageId !== undefined && dhs_messageId !== null ? "" + dhs_messageId : "",
                "dhs-auditIdType": dhs_auditIdType !== undefined && dhs_auditIdType !== null ? "" + dhs_auditIdType : "",
                "dhs-correlationId": dhs_correlationId !== undefined && dhs_correlationId !== null ? "" + dhs_correlationId : "",
                "dhs-productId": dhs_productId !== undefined && dhs_productId !== null ? "" + dhs_productId : "",
                "dhs-subjectIdType": dhs_subjectIdType !== undefined && dhs_subjectIdType !== null ? "" + dhs_subjectIdType : "",
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processAirImmunisationIndigenousStatusUpdate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processAirImmunisationIndigenousStatusUpdate(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<IndigenousStatusResponseType>;
                }
            } else
                return _observableThrow(response_) as any as Observable<IndigenousStatusResponseType>;
        }));
    }

    protected processAirImmunisationIndigenousStatusUpdate(response: HttpResponseBase): Observable<IndigenousStatusResponseType> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            result200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver) as IndigenousStatusResponseType;
            return _observableOf(result200);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result400: any = null;
            result400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver) as IndigenousStatusResponseType;
            return throwException("Bad Request", status, _responseText, _headers, result400);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * Get Medical Contraindication History
     * @param authorization JWT header for authorization
     * @param dhs_auditId DHS Audit ID
     * @param dhs_subjectId DHS Subject ID - Individual Date of birth in DDMMYYYY
     * @param dhs_messageId DHS Message ID
     * @param dhs_auditIdType DHS Audit Type
     * @param dhs_correlationId DHS Correlation ID
     * @param dhs_productId DHS Product ID
     * @param dhs_subjectIdType DHS Subject ID Type
     * @return 200 OK
     */
    airImmunisationMedContraindicationHistory(body: AirHistoryRequestType, authorization: string, dhs_auditId: string, dhs_subjectId: string, dhs_messageId: string, dhs_auditIdType: string, dhs_correlationId: string, dhs_productId: string, dhs_subjectIdType: string): Observable<MedicalContraindicationHistoryResponseType> {
        let url_ = this.baseUrl + "/v1/individual/medical-contraindication/history";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Authorization": authorization !== undefined && authorization !== null ? "" + authorization : "",
                "dhs-auditId": dhs_auditId !== undefined && dhs_auditId !== null ? "" + dhs_auditId : "",
                "dhs-subjectId": dhs_subjectId !== undefined && dhs_subjectId !== null ? "" + dhs_subjectId : "",
                "dhs-messageId": dhs_messageId !== undefined && dhs_messageId !== null ? "" + dhs_messageId : "",
                "dhs-auditIdType": dhs_auditIdType !== undefined && dhs_auditIdType !== null ? "" + dhs_auditIdType : "",
                "dhs-correlationId": dhs_correlationId !== undefined && dhs_correlationId !== null ? "" + dhs_correlationId : "",
                "dhs-productId": dhs_productId !== undefined && dhs_productId !== null ? "" + dhs_productId : "",
                "dhs-subjectIdType": dhs_subjectIdType !== undefined && dhs_subjectIdType !== null ? "" + dhs_subjectIdType : "",
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processAirImmunisationMedContraindicationHistory(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processAirImmunisationMedContraindicationHistory(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<MedicalContraindicationHistoryResponseType>;
                }
            } else
                return _observableThrow(response_) as any as Observable<MedicalContraindicationHistoryResponseType>;
        }));
    }

    protected processAirImmunisationMedContraindicationHistory(response: HttpResponseBase): Observable<MedicalContraindicationHistoryResponseType> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            result200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver) as MedicalContraindicationHistoryResponseType;
            return _observableOf(result200);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result400: any = null;
            result400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver) as MedicalContraindicationHistoryResponseType;
            return throwException("Bad Request", status, _responseText, _headers, result400);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * Record Medical Contraindication request
     * @param authorization JWT header for authorization
     * @param dhs_auditId DHS Audit ID
     * @param dhs_subjectId DHS Subject ID - Individual Date of birth in DDMMYYYY
     * @param dhs_messageId DHS Message ID
     * @param dhs_auditIdType DHS Audit Type
     * @param dhs_correlationId DHS Correlation ID
     * @param dhs_productId DHS Product ID
     * @param dhs_subjectIdType DHS Subject ID Type
     * @return 200 OK
     */
    airImmunisationMedContraindicationRecord(body: AddMedicalContraindicationRequestType, authorization: string, dhs_auditId: string, dhs_subjectId: string, dhs_messageId: string, dhs_auditIdType: string, dhs_correlationId: string, dhs_productId: string, dhs_subjectIdType: string): Observable<AddMedicalContraindicationResponseType> {
        let url_ = this.baseUrl + "/v1/individual/medical-contraindication/record";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Authorization": authorization !== undefined && authorization !== null ? "" + authorization : "",
                "dhs-auditId": dhs_auditId !== undefined && dhs_auditId !== null ? "" + dhs_auditId : "",
                "dhs-subjectId": dhs_subjectId !== undefined && dhs_subjectId !== null ? "" + dhs_subjectId : "",
                "dhs-messageId": dhs_messageId !== undefined && dhs_messageId !== null ? "" + dhs_messageId : "",
                "dhs-auditIdType": dhs_auditIdType !== undefined && dhs_auditIdType !== null ? "" + dhs_auditIdType : "",
                "dhs-correlationId": dhs_correlationId !== undefined && dhs_correlationId !== null ? "" + dhs_correlationId : "",
                "dhs-productId": dhs_productId !== undefined && dhs_productId !== null ? "" + dhs_productId : "",
                "dhs-subjectIdType": dhs_subjectIdType !== undefined && dhs_subjectIdType !== null ? "" + dhs_subjectIdType : "",
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processAirImmunisationMedContraindicationRecord(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processAirImmunisationMedContraindicationRecord(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<AddMedicalContraindicationResponseType>;
                }
            } else
                return _observableThrow(response_) as any as Observable<AddMedicalContraindicationResponseType>;
        }));
    }

    protected processAirImmunisationMedContraindicationRecord(response: HttpResponseBase): Observable<AddMedicalContraindicationResponseType> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            result200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver) as AddMedicalContraindicationResponseType;
            return _observableOf(result200);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result400: any = null;
            result400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver) as AddMedicalContraindicationResponseType;
            return throwException("Bad Request", status, _responseText, _headers, result400);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * Get Natural Immunity History
     * @param authorization JWT header for authorization
     * @param dhs_auditId DHS Audit ID
     * @param dhs_subjectId DHS Subject ID - Individual Date of birth in DDMMYYYY
     * @param dhs_messageId DHS Message ID
     * @param dhs_auditIdType DHS Audit Type
     * @param dhs_correlationId DHS Correlation ID
     * @param dhs_productId DHS Product ID
     * @param dhs_subjectIdType DHS Subject ID Type
     * @return 200 OK
     */
    airImmunisationNaturalImmunityHistory(body: AirHistoryRequestType, authorization: string, dhs_auditId: string, dhs_subjectId: string, dhs_messageId: string, dhs_auditIdType: string, dhs_correlationId: string, dhs_productId: string, dhs_subjectIdType: string): Observable<NaturalImmunityHistoryResponseType> {
        let url_ = this.baseUrl + "/v1/individual/natural-immunity/history";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Authorization": authorization !== undefined && authorization !== null ? "" + authorization : "",
                "dhs-auditId": dhs_auditId !== undefined && dhs_auditId !== null ? "" + dhs_auditId : "",
                "dhs-subjectId": dhs_subjectId !== undefined && dhs_subjectId !== null ? "" + dhs_subjectId : "",
                "dhs-messageId": dhs_messageId !== undefined && dhs_messageId !== null ? "" + dhs_messageId : "",
                "dhs-auditIdType": dhs_auditIdType !== undefined && dhs_auditIdType !== null ? "" + dhs_auditIdType : "",
                "dhs-correlationId": dhs_correlationId !== undefined && dhs_correlationId !== null ? "" + dhs_correlationId : "",
                "dhs-productId": dhs_productId !== undefined && dhs_productId !== null ? "" + dhs_productId : "",
                "dhs-subjectIdType": dhs_subjectIdType !== undefined && dhs_subjectIdType !== null ? "" + dhs_subjectIdType : "",
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processAirImmunisationNaturalImmunityHistory(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processAirImmunisationNaturalImmunityHistory(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<NaturalImmunityHistoryResponseType>;
                }
            } else
                return _observableThrow(response_) as any as Observable<NaturalImmunityHistoryResponseType>;
        }));
    }

    protected processAirImmunisationNaturalImmunityHistory(response: HttpResponseBase): Observable<NaturalImmunityHistoryResponseType> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            result200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver) as NaturalImmunityHistoryResponseType;
            return _observableOf(result200);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result400: any = null;
            result400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver) as NaturalImmunityHistoryResponseType;
            return throwException("Bad Request", status, _responseText, _headers, result400);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * Record Natural Immunity request
     * @param authorization JWT header for authorization
     * @param dhs_auditId DHS Audit ID
     * @param dhs_subjectId DHS Subject ID - Individual Date of birth in DDMMYYYY
     * @param dhs_messageId DHS Message ID
     * @param dhs_auditIdType DHS Audit Type
     * @param dhs_correlationId DHS Correlation ID
     * @param dhs_productId DHS Product ID
     * @param dhs_subjectIdType DHS Subject ID Type
     * @return 200 OK
     */
    airImmunisationNaturalImmunityRecord(body: AddNaturalImmunityRequestType, authorization: string, dhs_auditId: string, dhs_subjectId: string, dhs_messageId: string, dhs_auditIdType: string, dhs_correlationId: string, dhs_productId: string, dhs_subjectIdType: string): Observable<AddNaturalImmunityResponseType> {
        let url_ = this.baseUrl + "/v1/individual/natural-immunity/record";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Authorization": authorization !== undefined && authorization !== null ? "" + authorization : "",
                "dhs-auditId": dhs_auditId !== undefined && dhs_auditId !== null ? "" + dhs_auditId : "",
                "dhs-subjectId": dhs_subjectId !== undefined && dhs_subjectId !== null ? "" + dhs_subjectId : "",
                "dhs-messageId": dhs_messageId !== undefined && dhs_messageId !== null ? "" + dhs_messageId : "",
                "dhs-auditIdType": dhs_auditIdType !== undefined && dhs_auditIdType !== null ? "" + dhs_auditIdType : "",
                "dhs-correlationId": dhs_correlationId !== undefined && dhs_correlationId !== null ? "" + dhs_correlationId : "",
                "dhs-productId": dhs_productId !== undefined && dhs_productId !== null ? "" + dhs_productId : "",
                "dhs-subjectIdType": dhs_subjectIdType !== undefined && dhs_subjectIdType !== null ? "" + dhs_subjectIdType : "",
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processAirImmunisationNaturalImmunityRecord(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processAirImmunisationNaturalImmunityRecord(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<AddNaturalImmunityResponseType>;
                }
            } else
                return _observableThrow(response_) as any as Observable<AddNaturalImmunityResponseType>;
        }));
    }

    protected processAirImmunisationNaturalImmunityRecord(response: HttpResponseBase): Observable<AddNaturalImmunityResponseType> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            result200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver) as AddNaturalImmunityResponseType;
            return _observableOf(result200);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result400: any = null;
            result400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver) as AddNaturalImmunityResponseType;
            return throwException("Bad Request", status, _responseText, _headers, result400);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * Get Vaccine Trial History
     * @param authorization JWT header for authorization
     * @param dhs_auditId DHS Audit ID
     * @param dhs_subjectId DHS Subject ID - Individual Date of birth in DDMMYYYY
     * @param dhs_messageId DHS Message ID
     * @param dhs_auditIdType DHS Audit Type
     * @param dhs_correlationId DHS Correlation ID
     * @param dhs_productId DHS Product ID
     * @param dhs_subjectIdType DHS Subject ID Type
     * @return 200 OK
     */
    airImmunisationVaccineTrialHistory(body: AirHistoryRequestType, authorization: string, dhs_auditId: string, dhs_subjectId: string, dhs_messageId: string, dhs_auditIdType: string, dhs_correlationId: string, dhs_productId: string, dhs_subjectIdType: string): Observable<VaccineTrialHistoryResponseType> {
        let url_ = this.baseUrl + "/v1/individual/vaccine-trial/history";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Authorization": authorization !== undefined && authorization !== null ? "" + authorization : "",
                "dhs-auditId": dhs_auditId !== undefined && dhs_auditId !== null ? "" + dhs_auditId : "",
                "dhs-subjectId": dhs_subjectId !== undefined && dhs_subjectId !== null ? "" + dhs_subjectId : "",
                "dhs-messageId": dhs_messageId !== undefined && dhs_messageId !== null ? "" + dhs_messageId : "",
                "dhs-auditIdType": dhs_auditIdType !== undefined && dhs_auditIdType !== null ? "" + dhs_auditIdType : "",
                "dhs-correlationId": dhs_correlationId !== undefined && dhs_correlationId !== null ? "" + dhs_correlationId : "",
                "dhs-productId": dhs_productId !== undefined && dhs_productId !== null ? "" + dhs_productId : "",
                "dhs-subjectIdType": dhs_subjectIdType !== undefined && dhs_subjectIdType !== null ? "" + dhs_subjectIdType : "",
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processAirImmunisationVaccineTrialHistory(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processAirImmunisationVaccineTrialHistory(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<VaccineTrialHistoryResponseType>;
                }
            } else
                return _observableThrow(response_) as any as Observable<VaccineTrialHistoryResponseType>;
        }));
    }

    protected processAirImmunisationVaccineTrialHistory(response: HttpResponseBase): Observable<VaccineTrialHistoryResponseType> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            result200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver) as VaccineTrialHistoryResponseType;
            return _observableOf(result200);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result400: any = null;
            result400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver) as VaccineTrialHistoryResponseType;
            return throwException("Bad Request", status, _responseText, _headers, result400);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param authorization JWT header for authorization
     * @param dhs_auditId DHS Audit ID
     * @param dhs_subjectId DHS Subject ID - Individual Date of birth in DDMMYYYY
     * @param dhs_messageId DHS Message ID
     * @param dhs_auditIdType DHS Audit Type
     * @param dhs_correlationId DHS Correlation ID
     * @param dhs_productId DHS Product ID
     * @param dhs_subjectIdType DHS Subject ID Type
     * @return 200 OK
     */
    airImmunisationScheduleCatchup(body: CatchupDateRequestType, authorization: string, dhs_auditId: string, dhs_subjectId: string, dhs_messageId: string, dhs_auditIdType: string, dhs_correlationId: string, dhs_productId: string, dhs_subjectIdType: string): Observable<CatchupDateResponseType> {
        let url_ = this.baseUrl + "/v1.1/schedule/catchup";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Authorization": authorization !== undefined && authorization !== null ? "" + authorization : "",
                "dhs-auditId": dhs_auditId !== undefined && dhs_auditId !== null ? "" + dhs_auditId : "",
                "dhs-subjectId": dhs_subjectId !== undefined && dhs_subjectId !== null ? "" + dhs_subjectId : "",
                "dhs-messageId": dhs_messageId !== undefined && dhs_messageId !== null ? "" + dhs_messageId : "",
                "dhs-auditIdType": dhs_auditIdType !== undefined && dhs_auditIdType !== null ? "" + dhs_auditIdType : "",
                "dhs-correlationId": dhs_correlationId !== undefined && dhs_correlationId !== null ? "" + dhs_correlationId : "",
                "dhs-productId": dhs_productId !== undefined && dhs_productId !== null ? "" + dhs_productId : "",
                "dhs-subjectIdType": dhs_subjectIdType !== undefined && dhs_subjectIdType !== null ? "" + dhs_subjectIdType : "",
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processAirImmunisationScheduleCatchup(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processAirImmunisationScheduleCatchup(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<CatchupDateResponseType>;
                }
            } else
                return _observableThrow(response_) as any as Observable<CatchupDateResponseType>;
        }));
    }

    protected processAirImmunisationScheduleCatchup(response: HttpResponseBase): Observable<CatchupDateResponseType> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            result200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver) as CatchupDateResponseType;
            return _observableOf(result200);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result400: any = null;
            result400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver) as CatchupDateResponseType;
            return throwException("Bad Request", status, _responseText, _headers, result400);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * Record Encounter request
     * @param authorization JWT header for authorization
     * @param dhs_auditId DHS Audit ID
     * @param dhs_subjectId DHS Subject ID - Individual Date of birth in DDMMYYYY
     * @param dhs_messageId DHS Message ID
     * @param dhs_auditIdType DHS Audit Type
     * @param dhs_correlationId DHS Correlation ID
     * @param dhs_productId DHS Product ID
     * @param dhs_subjectIdType DHS Subject ID Type
     * @return 200 OK
     */
    airImmunisationEncounterRecord12(body: AddEncounterRequestType, authorization: string, dhs_auditId: string, dhs_subjectId: string, dhs_messageId: string, dhs_auditIdType: string, dhs_correlationId: string, dhs_productId: string, dhs_subjectIdType: string): Observable<AddEncounterResponseType> {
        let url_ = this.baseUrl + "/v1.2/encounters/record";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Authorization": authorization !== undefined && authorization !== null ? "" + authorization : "",
                "dhs-auditId": dhs_auditId !== undefined && dhs_auditId !== null ? "" + dhs_auditId : "",
                "dhs-subjectId": dhs_subjectId !== undefined && dhs_subjectId !== null ? "" + dhs_subjectId : "",
                "dhs-messageId": dhs_messageId !== undefined && dhs_messageId !== null ? "" + dhs_messageId : "",
                "dhs-auditIdType": dhs_auditIdType !== undefined && dhs_auditIdType !== null ? "" + dhs_auditIdType : "",
                "dhs-correlationId": dhs_correlationId !== undefined && dhs_correlationId !== null ? "" + dhs_correlationId : "",
                "dhs-productId": dhs_productId !== undefined && dhs_productId !== null ? "" + dhs_productId : "",
                "dhs-subjectIdType": dhs_subjectIdType !== undefined && dhs_subjectIdType !== null ? "" + dhs_subjectIdType : "",
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processAirImmunisationEncounterRecord12(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processAirImmunisationEncounterRecord12(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<AddEncounterResponseType>;
                }
            } else
                return _observableThrow(response_) as any as Observable<AddEncounterResponseType>;
        }));
    }

    protected processAirImmunisationEncounterRecord12(response: HttpResponseBase): Observable<AddEncounterResponseType> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            result200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver) as AddEncounterResponseType;
            return _observableOf(result200);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result400: any = null;
            result400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver) as AddEncounterResponseType;
            return throwException("Bad Request", status, _responseText, _headers, result400);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * Update Encounter request
     * @param authorization JWT header for authorization
     * @param dhs_auditId DHS Audit ID
     * @param dhs_subjectId DHS Subject ID - Individual Date of birth in DDMMYYYY
     * @param dhs_messageId DHS Message ID
     * @param dhs_auditIdType DHS Audit Type
     * @param dhs_correlationId DHS Correlation ID
     * @param dhs_productId DHS Product ID
     * @param dhs_subjectIdType DHS Subject ID Type
     * @return 200 OK
     */
    airImmunisationEncounterUpdate(body: UpdateEncounterRequestType, authorization: string, dhs_auditId: string, dhs_subjectId: string, dhs_messageId: string, dhs_auditIdType: string, dhs_correlationId: string, dhs_productId: string, dhs_subjectIdType: string): Observable<UpdateEncounterResponseType> {
        let url_ = this.baseUrl + "/v1.1/encounter/update";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Authorization": authorization !== undefined && authorization !== null ? "" + authorization : "",
                "dhs-auditId": dhs_auditId !== undefined && dhs_auditId !== null ? "" + dhs_auditId : "",
                "dhs-subjectId": dhs_subjectId !== undefined && dhs_subjectId !== null ? "" + dhs_subjectId : "",
                "dhs-messageId": dhs_messageId !== undefined && dhs_messageId !== null ? "" + dhs_messageId : "",
                "dhs-auditIdType": dhs_auditIdType !== undefined && dhs_auditIdType !== null ? "" + dhs_auditIdType : "",
                "dhs-correlationId": dhs_correlationId !== undefined && dhs_correlationId !== null ? "" + dhs_correlationId : "",
                "dhs-productId": dhs_productId !== undefined && dhs_productId !== null ? "" + dhs_productId : "",
                "dhs-subjectIdType": dhs_subjectIdType !== undefined && dhs_subjectIdType !== null ? "" + dhs_subjectIdType : "",
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processAirImmunisationEncounterUpdate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processAirImmunisationEncounterUpdate(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<UpdateEncounterResponseType>;
                }
            } else
                return _observableThrow(response_) as any as Observable<UpdateEncounterResponseType>;
        }));
    }

    protected processAirImmunisationEncounterUpdate(response: HttpResponseBase): Observable<UpdateEncounterResponseType> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            result200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver) as UpdateEncounterResponseType;
            return _observableOf(result200);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result400: any = null;
            result400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver) as UpdateEncounterResponseType;
            return throwException("Bad Request", status, _responseText, _headers, result400);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }
}

export interface ProviderIdentifierType {
    /** Vaccination provider number such as Medicare provider number or AIR provider number. */
    providerNumber: string;
    hpioNumber?: string | undefined;
    hpiiNumber?: string | undefined;
}

export interface AccessType {
    code: string;
    name?: string | undefined;
    hasAccess: boolean;
}

export interface AirAccessListRequestType {
    informationProvider: ProviderIdentifierType;
}

export interface AirAccessListResponseType {
    statusCode: string;
    codeType?: string | undefined;
    message?: string | undefined;
    accessList?: AccessType[] | undefined;
    errors?: ErrorMessageType[] | undefined;
}

export interface ErrorMessageType {
    /** Error code */
    code: string;
    /** Error field name */
    field?: string | undefined;
    /** Error message details */
    message?: string | undefined;
}

export interface MedicareCardType {
    /** Individual's Medicare card number */
    medicareCardNumber: string;
    /** Medicare Individual Reference Number */
    medicareIRN?: string | undefined;
}

export interface PersonalDetailsType {
    /** Individual's date of birth in format DDMMYYYY */
    dateOfBirth: string;
    /** Individual's First Name */
    firstName?: string | undefined;
    /** Individual's Last Name */
    lastName: string;
    /** The middle initial of the individual */
    initial?: string | undefined;
    /** Gender of the individual */
    gender?: string | undefined;
    /** Indicates that the individual only has one name (no first name) */
    onlyNameIndicator?: boolean | undefined;
}

export interface SearchAddressType {
    postCode: string;
}

export interface AddressType {
    addressLineOne?: string | undefined;
    addressLineTwo?: string | undefined;
    locality?: string | undefined;
    postCode: string;
}

export interface IndividualType {
    personalDetails?: PersonalDetailsType | undefined;
    medicareCard?: MedicareCardType | undefined;
    address?: SearchAddressType | undefined;
    ihiNumber?: string | undefined;
}

export interface ResponseIndividualType {
    personalDetails?: PersonalDetailsType | undefined;
    medicareCard?: MedicareCardType | undefined;
    address?: AddressType | undefined;
}

export interface IndividualDetailsType {
    individualIdentifier?: string | undefined;
    individual?: ResponseIndividualType | undefined;
    /** Individual's catchup date in format DDMMYYYY */
    catchupDate?: string | undefined;
    endDateCode?: string | undefined;
    indigenousStatus?: boolean | undefined;
    additionalVaccineIndicator?: boolean | undefined;
    medContraindicationIndicator?: boolean | undefined;
    naturalImmunityIndicator?: boolean | undefined;
    vaccineTrialIndicator?: boolean | undefined;
    actionRequiredIndicator?: boolean | undefined;
}

export interface IdentifyIndividualRequestType {
    individual: IndividualType;
    informationProvider: ProviderIdentifierType;
}

export interface IndividualDetailsResponseType {
    statusCode: string;
    codeType?: string | undefined;
    message?: string | undefined;
    individualDetails?: IndividualDetailsType | undefined;
    errors?: ErrorMessageType[] | undefined;
}

export interface AdditionalVaccineIndicatorRequestType {
    individualIdentifier: string;
    acknowledgement: boolean;
    informationProvider: ProviderIdentifierType;
}

export interface AdditionalVaccineIndicatorResponseType {
    statusCode: string;
    codeType?: string | undefined;
    message?: string | undefined;
    errors?: ErrorMessageType[] | undefined;
}

export interface DueVaccineType {
    disease?: string | undefined;
    vaccineDose?: string | undefined;
    /** Due date in format DDMMYYYY */
    dueDate?: string | undefined;
}

export interface EncounterHistoryType {
    /** Claim id of the encounter */
    claimId: string;
    /** Claim sequence number of the encounter */
    claimSeqNum: number;
    /** Immunisation encounter sequence number of the encounter */
    immEncSeqNum: number;
    episodes?: EpisodeResponseType[] | undefined;
    editable?: boolean | undefined;
    /** Date submitted in format DDMMYYYY */
    dateOfService?: string | undefined;
    /** Date submitted in format DDMMYYYY */
    dateSubmitted?: string | undefined;
    schoolId?: string | undefined;
    /** Country code of country where vaccination was administered */
    countryCode?: string | undefined;
    /** Was the encounter administered overseas, true or false */
    administeredOverseas?: boolean | undefined;
}

export interface EpisodeResponseType {
    id: number;
    vaccineCode: string;
    vaccineDose?: string | undefined;
    vaccineBatch?: string | undefined;
    vaccineSerialNumber?: string | undefined;
    actionRequiredIndicator: boolean;
    editable: boolean;
    information?: InformationType | undefined;
}

export interface ImmunisationDetailsResponseType {
    dueList?: DueVaccineType[] | undefined;
    encounters?: EncounterHistoryType[] | undefined;
}

export interface AirHistoryRequestType {
    individualIdentifier: string;
    informationProvider: ProviderIdentifierType;
}

export interface ImmunisationHistoryResponseType {
    statusCode: string;
    codeType?: string | undefined;
    message?: string | undefined;
    immunisationDetails?: ImmunisationDetailsResponseType | undefined;
    errors?: ErrorMessageType[] | undefined;
}

export interface InformationType {
    status: string;
    code?: string | undefined;
    text?: string | undefined;
    messageCode?: string | undefined;
    messageText?: string | undefined;
}

export interface ImmunisationHistoryStatementType {
    mimeType: ImmunisationHistoryStatementTypeMimeType;
    /** File name of the PDF immunisation history statement */
    fileName: string;
    /** Base64-encoded content of PDF immunisation history statement */
    fileContent: string;
}

export interface ImmunisationHistoryStatementResponseType {
    statusCode: string;
    codeType?: string | undefined;
    message?: string | undefined;
    immunisationHistoryStatement?: ImmunisationHistoryStatementType | undefined;
    errors?: ErrorMessageType[] | undefined;
}

export interface IndigenousStatusRequestType {
    individualIdentifier: string;
    indigenousStatus: boolean;
    informationProvider: ProviderIdentifierType;
}

export interface IndigenousStatusResponseType {
    statusCode: string;
    codeType?: string | undefined;
    message?: string | undefined;
    errors?: ErrorMessageType[] | undefined;
}

export interface MedicalContraindiationResponseType {
    vaccineCode: string;
    typeCode: MedicalContraindiationResponseTypeTypeCode;
    /** Start date in format DDMMYYYY */
    startDate: string;
    /** End date in format DDMMYYYY */
    endDate?: string | undefined;
    reason: MedicalContraindiationResponseTypeReason;
    /** AnaphylaxisDate date in format DDMMYYYY */
    anaphylaxisDate?: string | undefined;
}

export interface MedicalContraindicationHistoryResponseType {
    statusCode: string;
    codeType?: string | undefined;
    message?: string | undefined;
    medContraindicationList?: MedicalContraindiationResponseType[] | undefined;
    errors?: ErrorMessageType[] | undefined;
}

export interface MedicalContraindiationRequestType {
    vaccineCode: string;
    typeCode: MedicalContraindiationRequestTypeTypeCode;
    /** End date in format DDMMYYYY */
    endDate?: string | undefined;
    reason: MedicalContraindiationRequestTypeReason;
    /** Previous anaphylaxis date in format DDMMYYYY */
    anaphylaxisDate?: string | undefined;
}

export interface AddMedicalContraindicationRequestType {
    individualIdentifier: string;
    contraindication: MedicalContraindiationRequestType;
    informationProvider: ProviderIdentifierType;
}

export interface AddMedicalContraindicationResponseType {
    statusCode: string;
    codeType?: string | undefined;
    message?: string | undefined;
    errors?: ErrorMessageType[] | undefined;
}

export interface NaturalImmunityResponseType {
    disease: string;
    /** Notification date in format DDMMYYYY */
    notificationDate: string;
    /** Lab test date in format DDMMYYYY */
    labTestDate?: string | undefined;
    /** Diagnosis date in format DDMMYYYY */
    diagnosisDate?: string | undefined;
}

export interface NaturalImmunityHistoryResponseType {
    statusCode: string;
    codeType?: string | undefined;
    message?: string | undefined;
    naturalImmunityList?: NaturalImmunityResponseType[] | undefined;
    errors?: ErrorMessageType[] | undefined;
}

export interface NaturalImmunityRequestType {
    disease: string;
    /** Lab test date in format DDMMYYYY - it is required if diagnosisDate is not provided */
    labTestDate?: string | undefined;
    /** Diagnosis date in format DDMMYYYY - it is required if labTestDate is not provided */
    diagnosisDate?: string | undefined;
}

export interface AddNaturalImmunityRequestType {
    individualIdentifier: string;
    immunity: NaturalImmunityRequestType;
    informationProvider: ProviderIdentifierType;
}

export interface AddNaturalImmunityResponseType {
    statusCode: string;
    codeType?: string | undefined;
    message?: string | undefined;
    errors?: ErrorMessageType[] | undefined;
}

export interface VaccineTrialType {
    antigenCode?: string | undefined;
    dose?: string | undefined;
    /** Start date in format DDMMYYYY */
    startDate?: string | undefined;
    /** End date in format DDMMYYYY */
    endDate?: string | undefined;
}

export interface VaccineTrialHistoryResponseType {
    statusCode: string;
    codeType?: string | undefined;
    message?: string | undefined;
    vaccineTrialList?: VaccineTrialType[] | undefined;
    errors?: ErrorMessageType[] | undefined;
}

export interface IndividualIdentifierType {
    personalDetails?: PersonalDetailsType | undefined;
    medicareCard?: MedicareCardType | undefined;
    address?: AddressType | undefined;
    ihiNumber?: string | undefined;
    atsiIndicator?: IndividualIdentifierTypeAtsiIndicator | undefined;
    acceptAndConfirm?: string | undefined;
}

export interface CatchupDateRequestType {
    individual: IndividualIdentifierType;
    informationProvider: ProviderIdentifierType;
}

export interface CatchupDateResponseType {
    statusCode: string;
    codeType?: string | undefined;
    message?: string | undefined;
    /** Immunisation schedule catchup date in format ddMMyyyy */
    catchupDate?: string | undefined;
    errors?: ErrorMessageType[] | undefined;
}

export interface EpisodeType {
    id: number;
    vaccineCode: string;
    vaccineDose?: string | undefined;
    vaccineBatch?: string | undefined;
    vaccineSerialNumber?: string | undefined;
}

export interface EncounterType {
    id: number;
    claimSequenceNumber?: string | undefined;
    episodes: EpisodeType[];
    immunisationProvider?: ProviderIdentifierType | undefined;
    schoolId?: string | undefined;
    administeredOverseas?: boolean | undefined;
    /** Country code of country where vaccination was administered */
    countryCode?: string | undefined;
    acceptAndConfirm?: string | undefined;
    /** The date on which the Individual received the immunisation in format ddMMyyy */
    dateOfService: string;
}

export interface EncounterResponseType {
    id: number;
    claimSequenceNumber: string;
    episodes: EpisodeResponseType[];
    information?: InformationType | undefined;
    /** Claim id of the encounter */
    claimId?: string | undefined;
    /** Claim sequence number of the encounter */
    claimSeqNum?: number | undefined;
    /** Immunisation encounter sequence number of the encounter */
    immEncSeqNum: number;
    schoolId?: string | undefined;
    /** Date of service in format DDMMYYYY */
    dateOfService: string;
    /** Country code of country where vaccination was administered */
    countryCode?: string | undefined;
    /** Was the encounter administered overseas, true or false */
    administeredOverseas?: boolean | undefined;
}

export interface ClaimDetailsResponseType {
    claimId?: string | undefined;
    encounters?: EncounterResponseType[] | undefined;
}

export interface AddEncounterRequestType {
    individual: IndividualIdentifierType;
    encounters: EncounterType[];
    informationProvider: ProviderIdentifierType;
    claimId?: string | undefined;
}

export interface AddEncounterResponseType {
    statusCode: string;
    codeType?: string | undefined;
    message?: string | undefined;
    claimDetails?: ClaimDetailsResponseType | undefined;
    errors?: ErrorMessageType[] | undefined;
}

export interface EncounterRequestType {
    /** Claim id of the encounter */
    claimId: string;
    /** Claim sequence number of the encounter */
    claimSeqNum: number;
    /** Immunisation encounter sequence number of the encounter */
    immEncSeqNum: number;
    episodes: EpisodeType[];
    schoolId?: string | undefined;
    /** Date of service in format DDMMYYYY */
    dateOfService: string;
    /** Country code of country where vaccination was administered */
    countryCode?: string | undefined;
    /** Was the encounter administered overseas, true or false */
    administeredOverseas?: boolean | undefined;
    immunisationProvider?: ProviderIdentifierType | undefined;
}

export interface UpdateEncounterRequestType {
    individualIdentifier: string;
    encounter: EncounterRequestType;
    informationProvider: ProviderIdentifierType;
}

export interface UpdateEncounterResponseType {
    statusCode: string;
    codeType?: string | undefined;
    message?: string | undefined;
    encounter?: EncounterResponseType | undefined;
    errors?: ErrorMessageType[] | undefined;
}

export enum ImmunisationHistoryStatementTypeMimeType {
    Application_pdf = "application/pdf",
}

export enum MedicalContraindiationResponseTypeTypeCode {
    P = "P",
    T = "T",
}

export enum MedicalContraindiationResponseTypeReason {
    M = "M",
    S = "S",
    P = "P",
    I = "I",
    A = "A",
}

export enum MedicalContraindiationRequestTypeTypeCode {
    P = "P",
    T = "T",
}

export enum MedicalContraindiationRequestTypeReason {
    M = "M",
    S = "S",
    P = "P",
    I = "I",
    A = "A",
}

export enum IndividualIdentifierTypeAtsiIndicator {
    Y = "Y",
    N = "N",
}

export class ApiException extends Error {
    override message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isApiException = true;

    static isApiException(obj: any): obj is ApiException {
        return obj.isApiException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): Observable<any> {
    if (result !== null && result !== undefined)
        return _observableThrow(result);
    else
        return _observableThrow(new ApiException(message, status, response, headers, null));
}

function blobToText(blob: any): Observable<string> {
    return new Observable<string>((observer: any) => {
        if (!blob) {
            observer.next("");
            observer.complete();
        } else {
            let reader = new FileReader();
            reader.onload = event => {
                observer.next((event.target as any).result);
                observer.complete();
            };
            reader.readAsText(blob);
        }
    });
}

}